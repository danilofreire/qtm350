---
title: QTM 350 - Data Science Computing
subtitle: Lecture 06 - More Git and GitHub
author:
  - name: Danilo Freire
    orcid: 0000-0002-4712-6810
    email: danilo.freire@emory.edu
    affiliations: "Department of Data and Decision Sciences <br> Emory University"
format:
  clean-revealjs:
    self-contained: true
    footer: "[More Git and GitHub](https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-06/06-more-git-github.html)"
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
editor:
  render-on-save: true
---

# Great to see you all again! üòä {background-color="#2d4563"}

# Recap and lecture overview üìö {background-color="#2d4563"}

## Recap of our last lecture
### In our last class, we covered

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- How to think in terms of projects
- File and folder organisation tips
- Git installation (`brew install git`)
- Git configuration
  - `git config --global user.name "Your Name"`
  - `git config --global user.email your@email.com`
- Creating and `init`(ialising) repositories
- How to `add` and `commit` changes
- Viewing commit history with `git log`
- How to use `git checkout` to go back in time
- Checking repository status with `git status`
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/xkcd2.png)
:::
:::
:::
:::

## Lecture overview

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
Today we will cover

- How to `push` and `pull` changes to and from remote repositories
- How to use `.gitignore` to avoid tracking certain files
- Creating and managing branches
- How to `clone` and `fork` repositories on GitHub
- Syncing forked repositories on GitHub
- How to create `issues` and `pull requests` on GitHub
- Other cool GitHub features, such as Gists, Pages, Actions, and CLI
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/pages.jpg){width="55%"}
![](figures/copilot.jpeg){width="55%"}
![](figures/cli-logo.png){width="55%"}
:::
:::
:::
:::

# Pushing changes to a remote repository üöÄ {background-color="#2d4563"}

## Pushing changes to a remote repository

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.colunms}
:::{.column size="50%"}
- Last class, we learned how to `add` and `commit` changes
- But what if we want to share our changes with others? ü§î
- There are two main ways to do this:
  - `push` changes to a remote repository (upload)
  - `pull` changes from a remote repository (download)
- To `push` changes to a remote repository, use the command `git push`
- And to `pull` changes, use the command `git pull`
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/push-pull.png){width="150%"}
:::
:::
:::
:::

## Pushing changes to a remote repository

:::{style="margin-top: 30px; font-size: 28px;"}
- Let's go back to our `my-project` local repository
- Check the last commit with `git log`
- Now, let's `push` our changes to a remote repository on GitHub
- First, we need to create a repository on GitHub
- Go to [GitHub](https://github.com) and click on the `+` sign on the top right corner
- Select `New repository`
- Name your repository `my-project`
- Click on `Create repository`
:::

## {background-image="figures/new-repo.png"}

## {background-image="figures/create-repo.png"}

## {background-image="figures/remote-repo.png"}

## Now, let's push our changes to GitHub

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- Why do we need to add a remote repository?
- Because we need to tell Git where to `push` our changes!
- `git remote add origin https://github.com/danilofreire/my-project.git`:
  - `remote`: tells Git we are adding a remote repository
  - `add`: adds a new remote repository
  - `origin`: the name of the remote repository
  -  `https://github.com/danilofreire/my-project.git` is the URL of the remote repository
- `git branch -M master`: renames the branch to `master`
- `git push -u origin master`: pushes the changes to the remote repository
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/remote-add.png){width="100%"}

- You may note that my branch was called `main` not `master`
- There is a movement to change the default branch name from `master` to `main`. [More here.](https://github.com/github/renaming)
- You can change the default branch name in your repository settings, but here I will stick to the default üòâ 
:::
:::
:::
:::

# And voi-l√†! üéâ {background-color="#2d4563"}

## {background-image="figures/push.png"}

## How to pull changes from a remote repository

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- To `push` further changes to the remote repository, you just repeat the process:
  - `git add file-name`
  - `git commit -m "Message"`
  - `git push` (no need to add the remote repository again)

- If you work by yourself on your computer only, [you already know everything you need to know about Git]{.alert} and you can go home now üòÇ
- Just kidding! There is still a lot to learn! 
- If you work with others, or if you use different computers, you need to know how to `pull` changes from GitHub
:::

:::{.column size="50%"}
- To `pull` changes from a remote repository, use (you've guessed it) the command `git pull`
- `git pull` is the equivalent of `git fetch` + `git merge`
  - `git fetch` downloads the changes from the remote repository
  - `git merge` merges the changes with your local repository

- Let's see an example where I add a commit directly on GitHub
- I will add a [`.gitignore` file to ignore certain files and directories](https://docs.github.com/en/github/using-git/ignoring-files)
:::
:::
:::

## Adding `.gitignore` to our repository

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.colunms}
:::{.column size="50%"}
- I will go to my repository on GitHub and click on `Add file` > `Create new file`
- After adding the file, I will commit the changes

- About `.gitignore`:
  - It is a file that tells Git which files to ignore
  - You can use wildcards, such as `*.csv`, to ignore all CSV files
  - You can also ignore entire directories, such as `data/`
  - You can also ignore files by name, such as `secrets.txt`
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/add-file.png){width="100%"}
![](figures/gitignore.png){width="100%"}
:::
:::
:::
:::

# Pulling changes 

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- Now, let's `pull` the changes to my local computer
- Just type `git pull` and the changes will be downloaded and merged
- If you work with others and they push changes to GitHub, you will need to `pull` the changes to your local computer too
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/pull.png){width="100%"}
:::
:::
:::
:::

## But wait a minute! ü§î

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- What if both my coauthors and I change the same line of code?
- If you change different files or lines in the same file, Git will merge the changes automatically üëç
- But if you change the same line of code, [Git will not know what to do]{.alert} and will ask you to resolve the conflict
- You can use a tool like `git mergetool` to help you resolve the conflict
- Or you can open the file in a text editor and resolve the conflict manually
:::

:::{.column size="50%"}
- Let me change the `.gitignore` file both in my computer and on GitHub, and commit the changes (do not push yet)

:::{style="text-align: center;"}
![](figures/vim.png){width="100%"}
![](figures/changes-computer.png){width="100%"}
:::
:::
:::
:::

## Changing the same file on GitHub

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.colunms}
:::{.column size="50%"}
- I've changed the same line of code on GitHub

![](figures/changes-github.png){width="100%"}

- Let's see what happens if I try to pull the changes to my local computer
:::

:::{.column size="50%"}
- Oh no! üò±

:::{style="text-align: center;"}
![](figures/conflict.png){width="100%"}
:::
:::
:::
:::

## Resolving conflicts

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- To resolve the conflict, you need to open the file in a text editor
- You will see the changes from both you and your coauthor (or yourself)
- You can choose which changes to keep, or you can keep both changes
- After resolving the conflict, you need to `add` the file and `commit` the changes
- Then you can `push` the changes to GitHub

- The line that starts with `<<<<<<<` is your changes
-  `=======` indicates the end of your changes and the start of your coauthor's changes
- The line that starts with `>>>>>>>` is the end of the changes from your coauthor and the commit hash
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/vim-conflict.png){width="100%"}
:::

- I will delete some lines and keep the changes from my computer
  
:::{style="text-align: center;"}
![](figures/vim-conflict2.png){width="100%"}
:::
:::
:::
:::

## Resolving conflicts

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- Now the conflict is resolved! ü•≥

![](figures/vim-conflict3.png){width="100%"}
:::

:::{.column size="50%"}
- There are other ways to resolve conflicts, such as using `git mergetool`
- You can also use a graphical tool, such as [Sourcetree](https://www.sourcetreeapp.com) or [GitHub Desktop](https://desktop.github.com)
- But it is good to know how to resolve conflicts manually üòä

:::{style="text-align: center;"}
![](figures/resolved.png){width="100%"}

<https://github.com/danilofreire/my-project>
:::
:::
:::
:::

# Branches üåø {background-color="#2d4563"}

## Branches

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- Branches are a way to work on different features or versions of your project
- The `master` (or `main`) branch is the default branch in Git on your computer and on GitHub
- However, you can create new branches to work on new features or versions [without affecting the `master` branch]{.alert}
- You can create a new branch with the command `git branch branch-name`
- And you can switch to the new branch with the command `git checkout branch-name`
  - Or you can use `git switch branch-name` if you have Git 2.23 or later
- You can also create a new branch and switch to it with the command `git checkout -b branch-name`
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/branches.png){width="100%"}
:::

- Branches may or may not be merged back to the `master` branch
- You can also delete branches after merging them
:::
:::
:::

## Branches

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- Let's create a new branch called `feature-1`
  - `git checkout -b feature-1`
- I will add a new file called `feature-1.txt` to the new branch
  - `echo "This is feature 1" > feature-1.txt`
- Then, I will `add`, `commit`, and `push` the changes to GitHub
  - `git add feature-1.txt && git commit -m "Add feature 1"`
  - `git push origin feature-1` (you need to push the new branch to GitHub)
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/branch.png){width="100%"}
:::
:::
:::
:::

## Branches

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- Now the branch is already on GitHub
- Let's merge the changes to the `master` branch
  - `git checkout master`
  - `git merge feature-1`
  - `git push`

- Done! üéâ Let's see what happened

- You can delete the branch with `git branch -d feature-1`
- To delete the branch on GitHub, use `git push origin --delete feature-1`
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/merge-branch.png){width="100%"}

More about branches [here](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell).
:::
:::
:::
:::

## Going back to a specific commit

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- Sometimes you need to revert to a previous state of your project
- First, view your commit history: `git log --oneline` (shows abbreviated hashes)
- To temporarily checkout a specific commit and make it your working directory:
  - `git checkout <commit-hash>`
  - This puts you in detached HEAD state (changes won't be on a branch)
- To create a new branch from that commit: `git checkout -b new-branch <commit-hash>`
- To permanently reset your current branch to that commit (rewrites history):
  - `git reset --hard <commit-hash>` 
  - [Use with caution! This erases commits between current HEAD and target]{.alert}
- After checking out a commit, use `git status` to confirm your state
:::

:::{.column size="50%"}
- Commit hashes look like: `a1b2c3d` or full `1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o`
- Always copy-paste commit hashes to avoid typos
- To return to the latest commit on your branch: `git checkout branch-name`
- Git keeps all history, so you can always recover lost commits later
- For collaborative projects, prefer branching over resetting to avoid disrupting others

:::{style="text-align: center;"}
![](figures/git-checkout.png){width="100%"}
:::
:::
:::
:::

## Going back to a specific commit

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- It is a good idea to create a new branch when checking out an old commit
- This way, you can make changes without affecting the main branch
- We do this with `git switch -c new-branch <commit-hash>` (Git 2.23+)
- If you want to discard changes and go back to the latest commit on your branch, use `git switch branch-name`
- To delete a branch, use `git branch -d branch-name`
- If you are sure you don't want to use your `main` branch anymore, you can delete it with `git branch -D main` (`-D` forces deletion)
- Then rename your current branch to `main` with `git branch -m main`
- Finally, commit and push the new `main` branch to GitHub with `git push -u origin main`
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/git-checkout2.png){width="100%"}
:::
:::
:::
:::

# Fork and clone üç¥ {background-color="#2d4563"}

## Cloning

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- Cloning is the process of downloading a repository from GitHub to your computer
- You can clone your own repositories or other people's repositories
- To clone a repository, use the command `git clone https://github.com/username/repository-name.git`
  - For instance, `git clone https://github.com/danilofreire/my-project.git`

- Cloning a repository will create a new folder with the repository name
- Your copy will be [directly connected to the original repository]{.alert}
- Which means that, if the repository is not yours, [you cannot push changes to it]{.alert}
- Mostly used when you have push rights and want to work on a project locally
:::

:::{.column size="50%"}
- Cloning the `my-project` repository to a different folder

:::{style="text-align: center;"}
![](figures/clone.png){width="100%"}
:::
:::
:::
:::

## Forking

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- Forking is the process of creating [your copy]{.alert} of a repository on GitHub
- You can fork your own repositories or other people's repositories
- Different from cloning, forking will create a new repository [on your GitHub account]{.alert}
- This is very useful, as [you can push changes]{.alert} to your forked repository
- The fork maintains a connection to the original repository, often called the "upstream" repository
- Forks can be used to create entirely new projects based on the original codebase
- You can also [create a pull request]{.alert} to the original repository to suggest changes
:::

:::{.column size="50%"}
![](figures/fork.png){width="100%"}
:::
:::
:::

## Forking

:::{style="margin-top: 30px; font-size: 28px;"}
- Forking from GitHub is easy, but it requires a few steps
- Forking [is not part of Git]{.alert}, but it is part of GitHub
  - That's why you cannot do it from the command line!
- To fork a repository, go to the repository on GitHub and click on the `Fork` button on the top right corner
- Then, you can clone your forked repository to your computer as you did before
:::

## Forking

:::{style="margin-top: 30px; font-size: 23px; text-align: center;"}
![](figures/fork-repo01.png){width="100%"}
:::

## Forking

:::{style="margin-top: 30px; font-size: 23px;"}
:::{style="text-align: center;"}
![](figures/fork-repo02.png){width="60%"}
:::

- After forking, you will see the repository on your GitHub account
- Clone it with `git clone https://github.com/your-username/repository-name.git`
:::

## Syncing a forked repository

:::{style="margin-top: 30px; font-size: 20px;"}
:::{.colunms}
:::{.column size="50%"}
- After forking a repository, you may want to keep your forked repository up to date with the original repository
- This is pretty easy too
- Just go on GitHub and click on the "Sync fork" button and confirm the merge
  - Save your changes before doing this!
- This is surely the easiest way, but you can do it from the command line too
  - Add the original repository as a remote repository 
    - `git remote add upstream https://github.com/original-username/original-repository.git`
    - `git fetch upstream`
    - `git merge upstream/main` (or `upstream/master`)
    - `git push`
    - Done! üéâ
:::

:::{.column size="50%"}
![](figures/sync-fork.webp){width="100%"}

- More about syncing a forked repository [here](https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/syncing-a-fork).
:::
:::
:::

# Issues and pull requests üì• {background-color="#2d4563"}

## Issues and pull requests

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- [Issues]{.alert} are a way to track bugs, enhancements, or other tasks in a repository
- You can create an issue by clicking on the `Issues` tab on GitHub and then on the `New issue` button

:::{style="margin-top: 30px;"}
- [Pull requests]{.alert} are a way to suggest changes after you have forked and changed a repository
- You can create a pull request by clicking on the `Pull requests` tab on GitHub and then on the `New pull request` button
- The repository owner can then review your changes and merge them
- And that's how open-source projects work! ü§ìüéâ
:::
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/issues.webp){width="100%"}
Issues
:::
:::
:::
:::

## Pull requests

:::{style="margin-top: 30px; font-size: 23px; text-align: center;"}
![](figures/pull-request.png){width="60%"}
Pull requests
:::

# Other cool GitHub features üåüüêô {background-color="#2d4563"}

## GitHub has many other interesting features
### Gists

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.colunms}
:::{.column size="50%"}
- [Gists](https://gist.github.com) are a great way to share code snippets, notes, or other text
- You can create a Gist by clicking on the `+` sign on the top right corner of GitHub and then on `New gist`
- Paste any text or code and save it
- You can also create secret Gists that are not indexed by search engines
- Gists also benefit from version control, so you can see the history of changes and revert to previous versions
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/gist.png){width="100%"}
:::
:::
:::
:::

## GitHub Pages

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- This is one of the nicest features of GitHub
- [GitHub Pages](https://pages.github.com) allows you to create a website for your project, portfolio, or blog
- As you can see, I use GitHub Pages [for this course](https://danilofreire.github.io/qtm350) and [for my personal website](https://danilofreire.github.io)
- You can create a website by creating a new repository with the name `your-username.github.io`
- Then, you can upload your `.html`, `.css`, and `.js` files to the repository
- Your website will be available at `https://your-username.github.io`
- You can also use custom domains and [Jekyll themes](https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll), which are pre-designed templates
- Available themes [here](https://pages.github.com/themes)
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/pages.png){width="100%"}
:::
:::
:::
:::

## GitHub Actions

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- [GitHub Actions](https://github.com/features/actions) is a way to automate your workflow
- Actions are workflows that run on GitHub when you push changes to your repository
- You can use them to build, test, package, release, and deploy your code
- They are a relatively new feature of GitHub and are very powerful
- Basically, you can create a `.yml` file with the steps you want to run
- Then, every time you push a new commit, GitHub will run the steps in the `.yml` file
  - For instance, you can update your website every time you change the text
  - Or you can test your code/run a model every time you push changes
  - I have one that [automatically creates a list of my starred repositories every day](https://github.com/danilofreire/awesome-stars)
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/actions.png){width="100%"}
:::
:::
:::
:::

## GitHub Actions

:::{style="margin-top: 30px; font-size: 21px; text-align: center;"}
![](figures/actions2.png){width="82%"}
:::

## GitHub in the command line

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- [GitHub CLI](https://cli.github.com/) is a command-line tool that brings GitHub to your terminal
- You can install it with `brew install gh`
- GitHub CLI creates repositories, issues, pull requests, and more
- I use it both to create repositories and clone/fork them
  - `gh repo create my-project`
  - `gh repo clone danilofreire/my-project`
- Have a look at the [GitHub CLI manual](https://cli.github.com/manual/) for more information
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/cli.png){width="100%"}
:::
:::
:::
:::

## GitHub Copilot ü§ñ

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.colunms}
:::{.column size="50%"}
- Okay, I have the feeling that you are already tired of me talking about GitHub üòÇ
- But I've left the coolest feature for last: [GitHub Copilot](https://copilot.github.com)
- This is [really cool]{.alert}! GitHub Copilot is an AI pair programmer that helps you write code
- Think about [ChatGPT](https://chat.openai.com) but for code
- It is based on OpenAI's Codex and is available as a [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)
- You can use it to write entire functions, classes, or even entire programs
- Like ChatGPT, it is not perfect, but it is really good and can save you a lot of time
:::

:::{.column size="50%"}
:::{style="text-align: center;"}
![](figures/copilot2.png)
:::
:::
:::
:::

## GitHub Copilot

:::{style="margin-top: 30px; font-size: 21px;"}
![](figures/readme-gif.gif){width="100%"}
:::

## GitHub Copilot

:::{style="margin-top: 30px; font-size: 21px; text-align: center;"}
![](figures/copilot4.gif)
:::

## GitHub Copilot

:::{style="margin-top: 30px; font-size: 21px; text-align: center;"}
![](figures/copilot5.webp)
:::

# Phew! That's all for today! üéâ {background-color="#2d4563"}

# Thank you for your attention and see you next week! üòäüôè {background-color="#2d4563"}