---
title: QTM 350 - Data Science Computing
subtitle: "Lecture 03: Command Line Interface"
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: Department of Data and Decision Sciences <br> Emory University
format:
  clean-revealjs:
    self-contained: true
    footer: "[Command Line](https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-03/03-command-line.html#/title-slide)"
transition: slide
transition-speed: default
scrollable: true
engine: knitr
editor:
  render-on-save: true
---

```{r setup, include=FALSE}
# figures formatting setup
options(htmltools.dir.version = FALSE)
library(knitr)
opts_chunk$set(
  prompt = T,
  fig.align="center", #fig.width=6, fig.height=4.5, 
  # out.width="748px", #out.length="520.75px",
  dpi=300, #fig.path='Figs/',
  cache=T, #echo=F, warning=F, message=F
  engine.opts = list(bash = "-l")
  )

## Next hook based on this SO answer: https://stackoverflow.com/a/39025054
knit_hooks$set(
  prompt = function(before, options, envir) {
    options(
      prompt = if (options$engine %in% c('sh','bash', 'zsh')) '$ ' else 'R> ',
      continue = if (options$engine %in% c('sh','bash', 'zsh')) '$ ' else '+ '
      )
})

options(repos = c(CRAN = "https://cran.rstudio.com/"))
packages <- c("knitr", "rmarkdown", "fontawesome")

for (package in packages) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}
```

# Recap and lecture overview 📚 {background-color="#2d4563"}

## Brief recap of last class
### Early computing and data representation

:::{style="margin-top: 30px; font-size: 24px;"}

:::{.columns}
:::{.column width="50%"}
- Computers evolved from [people to mechanical calculators to silicon-based machines]{.alert}
- Modern computers use the [Von Neumann architecture]{.alert}, storing both instructions and data in memory
- Computers represent data using [binary (base 2) numbers]{.alert} made up of 0s and 1s
- A [bit]{.alert} is a single binary digit; [8 bits make a byte]{.alert}
- [Hexadecimal (base 16)]{.alert} is a compact way to represent binary, with each hex digit corresponding to 4 bits
- [Abstraction]{.alert} allows representing complex data like images and text using numbers
:::

:::{.column width="50%"}
![](figures/hexadecimal.png)
:::
:::
:::

## Brief recap of last class
### Representing images, colours and text

:::{style="margin-top: 30px; font-size: 24px;"}

:::{.columns}
:::{.column width="50%"}
- Images can be broken down into a [grid of coloured pixels]{.alert}
- Colours are represented using the [RGB model]{.alert}, with each colour channel (red, green, blue) ranging from 0-255
- 8-bit color uses 256 levels per channel, allowing for over [16 million possible colors]{.alert}
- Text is broken into [individual characters]{.alert}, with each character mapped to a number using an encoding like [ASCII]{.alert}
- [ASCII is a simple lookup table]{.alert} mapping the numbers 0-255 to characters
- [Unicode]{.alert} extends ASCII to support accented characters and symbols from all languages
:::

:::{.column width="50%"}
![](figures/rgb.png)
:::
:::
:::

## Brief recap of last class
### Programming languages

:::{style="margin-top: 30px; font-size: 24px;"}

:::{.columns}
:::{.column width="50%"}
- [Konrad Zuse]{.alert} created the first programmable computers and high-level programming language in the 1940s
- [Assembly]{.alert} allows writing human-readable instructions that map closely to machine code
- [High-level languages like Python]{.alert} abstract away hardware details and are more portable across systems
- [Low-level languages]{.alert} are harder to read and write but very fast and efficient
- [Compiled languages]{.alert} are converted to machine code before execution; [interpreted languages]{.alert} are executed on the fly
:::

:::{.column width="50%"}
![](figures/high-low-languages.png)
:::
:::
:::

## Today's lecture
### Command line: the old school way of interacting with computers

:::{style="margin-top: 30px; font-size: 24px;"}

:::{.columns}
:::{.column width="50%"}
- Today, we will learn about the [command line]{.alert}, a text-based interface to interact with computers
- We will learn some [basic commands]{.alert} to navigate the file system, create and delete files, and run programs
- We will also learn about [shell scripting]{.alert}, a way to automate tasks using the command line
- The command line is still widely used in data science and programming, especially for [remote servers]{.alert}, [cloud computing]{.alert}, and [automation]{.alert}
:::

:::{.column width="50%"}
![](figures/cli.png)
:::
:::
:::

# Questions? 🤓 {background-color="#2d4563"}

# What is the command line? 💻 {background-color="#2d4563"}

## A computer in a nutshell
### Operating system

:::{style="font-size: 20px;"}
:::{.columns}

::: {.column width="50%"}
![](figures/kernel-and-user-space.png)
Credit [Dave Kerr](https://effective-shell.com/part-2-core-skills/what-is-a-shell/)
:::

::: {.column width="50%"}
- The [operating system (OS)]{.alert} is system software that interfaces with (and manages access to) a computer's hardware. It also provides software resources
- The OS is divided into the [kernel and user space]{.alert}
- The [kernel]{.alert} is the core of the OS. It's responsible for interfacing with hardware (drivers), managing resources etc. Running software in the kernel is [extremely sensitive]{.alert}! That's why users are kept away from it!
- Curiosity: You can see the Linux kernel source code [on GitHub](https://github.com/torvalds/linux)
- The [user space]{.alert} provides an interface for users, who can run
  programs/applications on the machine. Hardware access of programmes (e.g., memory usage) is managed by the kernel. Programmes in user space are essentially in sandboxes, which sets a limit to how much damage they can do.
:::
:::
:::

## A computer in a nutshell
### Kernels and shells

:::{style="font-size: 23px;"}
:::{.columns}
:::{.column width="50%"}
![](figures/kernel-and-user-space.png)
![](figures/walnut.jpeg){width=25%}
Credit [Dave Kerr](https://effective-shell.com/part-2-core-skills/what-is-a-shell/)/[Kkchaudhary11](https://commons.wikimedia.org/w/index.php?curid=49069244)
:::

::: {.column width="50%"}
- The [shell]{.alert} is just a general name for any user space program that allows access to resources in the system, via some kind of interface
- Shells come in many different flavours but are generally provided to aid a human operator in accessing the system. This could be interactively, by [typing at a terminal]{.alert}, or via [scripts]{.alert}, which are files that contain a sequence of commands
- Modern computers use [graphical user interfaces (GUIs)]{.alert} as the standard tool for human-computer interaction
- [Why "kernel" and "shell"?]{.alert} The kernel is the soft, edible part of a nut or seed, which is surrounded by a shell to protect it. Useful metaphor, _innit_?
:::
:::
:::

## Interacting with the shell
### Terminals

:::{style="font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
![](figures/diagram3-terminal-and-shell.png)
Credit [Dave Kerr](https://effective-shell.com/part-2-core-skills/what-is-a-shell/)
:::

:::{.column width="50%"}
- Things are still a bit more complicated
- We're not directly interacting with the "shell" but using a [terminal]{.alert}
- A terminal is just a program that [reads input]{.alert} from the keyboard, [passes that input]{.alert} to another programme, and [displays the results]{.alert} on the screen
- A shell program on its own does not do this - it requires a terminal as an interface
- [Why "terminal"?]{.alert} Back in the old days (before computer screen existed), [terminal machines (hardware!)](https://www.friendlywire.com/articles/vintage-computers/) were used to let humans interface with [large machines ("mainframes")](https://en.wikipedia.org/wiki/Mainframe_computer). Often many terminals were connected to a single machine
- When you want to work with a computer in a data center (or remotely in cloud computing), you'll still do pretty much the same
:::
:::
:::

## Interacting with the shell
### Command line

:::{style="font-size: 21px;"}
:::{.columns}
:::{.column width="50%"}
![](figures/diagram3-terminal-and-shell.png)
Credit [Dave Kerr](https://effective-shell.com/part-2-core-skills/what-is-a-shell/)
:::

:::{.column width="50%"}
- Terminals are really quite simple - they're just text-based interfaces
- The first thing that a terminal will do is run a shell -- a program we can use to operate the computer
- [Back to the shell:]{.alert} the shell usually takes input

  - Interactively from the user via the terminal's [command line]{.alert}
  - Executes scripts (without command line)
- In interactive mode the shell then returns output

  - To the terminal where it is printed/shown
  - To files or other locations

- The command line represents what is shown and entered in the terminal. They can be [customised](https://ohmyz.sh/) (e.g., with colour highlighting) to make interaction more convenient
:::
:::
:::

## Shell variants
### Bash, Zsh, and others

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.columns}
:::{.column width="50%"}
![](figures/runningbashscript.png)
:::

:::{.column width="50%"}
-   It is important to note that there are [many different shell programs]{.alert}, and they [differ in terms of functionality](https://en.wikipedia.org/wiki/Comparison_of_command_shells)
-   On most Unix-like systems, the default shell is a program called [**bash**](https://en.wikipedia.org/wiki/Bash_(Unix_shell)), which stands for "Bourne-Again Shell"
-   Other examples are the [Z Shell](https://en.wikipedia.org/wiki/Z_shell) (or zsh; default on MacOS), [Windows Command Prompt](https://en.wikipedia.org/wiki/Cmd.exe) (cmd.exe, the default CLI on MS Windows), [Windows PowerShell](https://en.wikipedia.org/wiki/PowerShell), [C Shell](https://en.wikipedia.org/wiki/C_shell), and many more
-   When a terminal opens, it will immediately start the user's preferred shell program. (This can be [changed](https://effective-shell.com/part-1-transitioning-to-the-shell/getting-started/).)
:::
:::
:::

# Why bother with the shell? 🤷🏻‍♂️ {background-color="#2d4563"}

## Why bother with the shell?

:::{style="margin-top: 30px;"}

:::{.columns}
:::{.column width="50%"}
:::{.fragment .fade-in}
**Why should you use this...**

![](figures/zsh-screenshot.png)
:::
:::

::: {.column width="50%"}
:::{.fragment .fade-in}
**... instead of this?**

![](figures/macos-finder-screenshot.jpeg)
:::
:::
:::
:::

## Why bother with the shell?
### The programmer's best friend

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.incremental}
1.  [Speed.]{.alert} Typing is fast: A skilled shell user can manipulate a system at dazzling speeds just using a keyboard. Typing commands is generally much faster than exploring through user interfaces with a mouse.

2.  [Power.]{.alert} Both for executing commands and for fixing problems. There are some things you just can't do in an IDE or GUI. It also avoids memory complications associated with certain applications and/or IDEs.

3.  [Reproducibility.]{.alert} Scripting is reproducible, while clicking is not.

4.  [Portability.]{.alert} A shell can be used to interface to almost any type of computer, from a mainframe to a [Raspberry Pi](https://www.raspberrypi.com/), in a very similar way. The shell is often the only game in town for high performance computing (interacting with servers and super computers).

5.  [Automation.]{.alert} Shells are programmable: Working in the shell allows you to program workflows, that is create scripts to automate time-consuming or repetitive processes.

6.  [Become a marketable data scientist.]{.alert} Modern programming is often polyglot. The shell provides a common interface for tooling. Modern solutions are often built to run in containers on Linux. In this environment shell knowledge has become very valuable. In short, [the shell is having a renaissance](https://effective-shell.com/part-1-transitioning-to-the-shell/the-renaissance-of-the-shell/) in the age of data science.
:::
:::

# The Unix philosophy {background-color="#2d4563"}

## The Unix philosophy

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.incremental}
The shell tools that we're going to be using have their roots in the [Unix](https://en.wikipedia.org/wiki/Unix) family of operating systems originally developed at Bells Labs in the 1970s.

Besides paying homage, acknowledging the Unix lineage is important because these tools still embody the "[Unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy)":

> **Do One Thing And Do It Well**

By pairing and chaining well-designed individual components, we can build powerful and much more complex larger systems.

You can see why the Unix philosophy is also referred to as "minimalist and modular".

Again, this philosophy is very clearly expressed in the design and functionality of the Unix shell.
:::
:::

## Things to use the shell for

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.incremental}
- Navigating the file system
- Version control with Git
- Renaming and moving files
- Finding things on your computer
- Writing and running code
- Installing and updating software
- Monitoring system resources
- Connecting to cloud environments
- Running analyses ("jobs") on super computers
- ... and much more!
:::
:::

# Shell basics 🐚 🤓 {background-color="#2d4563"}

## Shell: First look

:::{style="margin-top: 30px; font-size: 24px;"}

Let's open up our shell!

A convenient way to do this is through [VS Code's built-in Terminal](https://code.visualstudio.com/docs/editor/integrated-terminal).

Click on the **View** menu, then **Terminal**. You can also use the shortcut ``Ctrl + ` `` (backtick).

Your system default shell is loaded. To find out what that is, type `echo $SHELL` in the terminal.

:::{style="margin-top:30px;"}
:::

```{bash}
#| echo: true
#| eval: true

echo $SHELL
```

It is [Z shell](https://ohmyz.sh/) in my case

:::{.incremental}
... what about you? It is your turn to find out! 🤓
:::
:::

## Your turn!

:::{style="margin-top: 30px; font-size: 25px;"}
:::{.columns}
:::{.column width="50%"}
Of course, it's always possible to open up the shell directly if you prefer. It's your turn!

- [Linux](https://www.wikihow.com/Open-a-Terminal-Window-in-Ubuntu)

- [Mac](https://www.techwalla.com/articles/how-to-open-terminal-on-a-macbook)

- [Windows](https://www.howtogeek.com/265900/everything-you-can-do-with-windows-10s-new-bash-shell/)

Feel free to check our class tutorial on [how to set up your shell in VS Code](https://danilofreire.github.io/qtm350/tutorials/01-vscode-anaconda-tutorial.html).
:::

:::{.column width="50%"}
Open your terminal and type the following commands (without the `$`):

```{bash}
#| echo: true
#| eval: false
echo $SHELL 
whoami 
pwd 
mkdir new-folder
cd ..
ls
man ls # type 'j' to scroll down, 'k' to scroll up, 'q' to quit
```

Share your results with a colleague (or the class)!
:::
:::
:::

## Shell: First look

:::{style="margin-top: 30px; font-size: 27px;"}
You should see something like:

```{bash}
#| echo: true
#| eval: false
 username@hostname:~$
```

This is shell-speak for: "Who am I and where am I?" 

- `username` denotes a specific user (one of potentially many on this computer).

- `@hostname` denotes the name of the computer or server.

- `:~` denotes the directory path (where `~` signifies the user's home directory).

- `$` (or maybe `%`) denotes the start of the command prompt.

    - (For a special "superuser" called root, the dollar sign will change to a `#`).

```{bash}
#| echo: true
#| eval: true
whoami
pwd
```
:::

# Syntax {background-color="#2d4563"}

## Syntax

:::{style="margin-top: 30px; font-size: 26px;"}
:::{.columns}
:::{.column width="50%"}
All bash commands have the same basic syntax:

[**command option(s) argument(s)**]{.alert}

**Examples:**

```{bash}
#| echo: true
#| eval: false
# list files in the Documents directory 
# in long format and human-readable sizes

ls -lh ~/Documents 
```

<br>

```{bash}
#| echo: true
#| eval: false
# sort the file and display only unique lines

sort -u file.txt 
```
:::

:::{.column width="50%"}
[Commands]{.alert}

- You don't always need options or arguments

- For example:
  - `ls ~/Documents/` and `ls -lh ~/Documents` are both valid commands that will yield (different) output

- However, you always need a command.
:::
:::
:::

## Syntax

:::{style="margin-top: 30px; font-size: 26px;"}
:::{.columns}
:::{.column width="50%"}
All Bash commands have the same basic syntax:

command [option(s)]{.alert} argument(s)

**Examples:**

```{bash}
#| echo: true
#| eval: false
# list files in the Documents directory 
# in long format and human-readable sizes

ls -lh ~/Documents 
```

<br>

```{bash}
#| echo: true
#| eval: false
# sort the file and display only unique lines

sort -u file.txt 
```
:::

:::{.column style="width: 40%; font-size: 18px;"}
[Options]{.alert} (also called [Flags]{.alert})

-   Start with a dash. Usually one letter.

-   Multiple options can be chained under a single dash.

```{bash}
#| echo: true
#| eval: false
ls -l -a -h /var/log # This works
ls -lah /var/log # So does this
```

-   An exception is with (rarer) options requiring two dashes.

```{bash}
#| echo: true
#| eval: false
ls --group-directories-first --human-readable /var/log
```

-   `l`: Use a long listing format. This option shows detailed information about the files and directories
-   `a`: Show all files, including hidden files (those starting with a dot)

-   `h`: With `-l`, print sizes in human-readable format (e.g., KB, MB)

-   `u`: Unique, it filters out the duplicate entries in the output

-   Think it's difficult to memorise what the individual letters stand for? [You're totally right!]{.alert}
:::
:::
:::

## Syntax

:::{style="margin-top: 30px; font-size: 26px;"}
:::{.columns}
:::{.column width="50%"}
All Bash commands have the same basic syntax:

command option(s) [argument(s)]{.alert}

**Examples:** 

```{bash}
#| echo: true
#| eval: false
# list files in the Documents directory 
# with human-readable sizes
$ ls -lh ~/Documents/
```

<br>

```{bash}
#| echo: true
#| eval: false
# sort the file and remove duplicates
$ sort -u file.txt
```
:::

::: {.column width="50%"}
[Arguments]{.alert}

-   Tell the command *what* to operate on.

-   Totally depends on the command what legit inputs are.

-   Can be a file, path, a set of files and folders, a string, and more

-   Sometimes more than just one argument is needed:

```{bash}
#| echo: true
#| eval: false
mv figs/cat.png best-figs/cat02.png
```
:::
:::
:::

# Help! 🆘 😟 {background-color="#2d4563"}

## Multiple ways to get help

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
-   The `man` tool can be used to look at the manual page for a topic.

-   The `man` pages are grouped into sections, we can see them with `man man`.

-   The [`cht.sh`](https://cht.sh/) website can be used directly from the shell to get help on tools. Run it like this: `curl cht.sh/command` ([how to install `curl`](https://curl.se/download.html)).
![](figures/chtsh.png)
:::

::: {.column width="50%"}
![](figures/beatles-help.jpeg)

- Or you can use an LLM (or Google) to search for help on a command. 
- There's a great chance that someone else has already asked the same question you have 😉
:::
:::
:::

## Multiple ways to get help

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.columns}
:::{.column width="50%"}
- You can also install the [`tldr` tool](https://github.com/tldr-pages/tldr) which provides simplified help pages for common commands. Run it like this: `tldr command`

```{bash}
#| echo: true
tldr ls
```
:::

::: {.column width="50%"}
![](figures/beatles-help.jpeg)

- For more info on how to get help, see [here](https://effective-shell.com/part-1-transitioning-to-the-shell/getting-help/).
:::
:::
:::

## Getting help with `man`

:::{style="margin-top: 30px; font-size: 24px;"}

The `man` command ("manual pages") is your friend if you need help.

```{bash}
#| echo: true
#| eval: false
man ls
```

```{bash}
#| echo: false
#| eval: true
man ls | col -b
```
:::

## Getting help with `man`

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
Manual pages are shown in the shell. Here are the essentials to navigate through contents presented in the pager:

-   `d` - Scroll down half a page
-   `u` - Scroll up half a page
-   `j` / `k` - Scroll down or up a line. You can also use the arrow keys for this
-   `q` - Quit
-   `/pattern` - Search for text provided as "pattern"
-   `n` - When searching, find the next occurrence
-   `N` - When searching, find the previous occurrence
-   These and other `man` tricks are detailed in the help pages (hit "h" when you're in the pager for an overview).
:::

:::{.column width="50%"}
![](figures/rtfm-bayeux.png)
[RTFM](https://en.wikipedia.org/wiki/RTFM)!

**Always check the documentation!**
:::
:::
:::

## `man` page explorer challenge

:::{style="margin-top: 30px; font-size: 26px;"}
Partner up and choose a command from the list below. Use `man` to complete these tasks:

```{bash}
#| echo: true
#| eval: false
# Choose one (or all) of the following commands:
ls, cd, cp, mv, rm, mkdir, rmdir, touch, cat, find
```

1. Summarise the command's purpose in one sentence.
2. Find an interesting option and explain what it does.
3. Create an example using your command with at least two options.
4. Bonus: Combine your command with your partner's in a single line.

You have about 5-10 minutes. Be ready to share your findings!

Reflection: How was using `man` compared to online searches? How might you use it in future projects?
:::

# Navigating your file system 🧭 {background-color="#2d4563"}

## Navigating your file system

:::{style="margin-top: 30px; font-size: 24px;"}
:::{.columns}
:::{.column width="50%"}
:::{.incremental}
-   Modern operating systems increasingly abstract away from underlying file systems (think about iOS, Android)
-   For data science operations it is important that you're able to efficiently navigate your system to get information on files and folders
-   Some questions that will pop up:
  -   What is my home directory?
  -   In which directory am I currently operating?
  -   Where is my stuff?
  -   Where do I want to put my stuff?
  -   How do I navigate from here to there?
:::
:::

::: {.column width="50%"}
![](figures/that-way-giphy.gif)
:::
:::
:::

## Navigation

:::{style="margin-top: 30px; font-size: 23px;"}
:::{.columns}
:::{.column width="50%"}
Key navigation commands are:

- `pwd` to print (the current) working directory.
- `cd` to change directory.

```{bash}
#| echo: true
pwd
```

You can use absolute paths, but it's better to use relative paths and invoke special symbols for a user's home folder (`~`), current directory (`.`), and parent directory (`..`) as needed
:::

:::{.column width="50%"}
:::{.fragment .fade-in}

Let's try it out!

Accessing the `figures/` directory:

```{bash}
#| echo: true
# mkdir figures # Create a directory called figures (if it doesn't exist)
cd figures # Change to the figures directory
pwd
```

Now, let's go back to the previous directory:

```{bash}
#| echo: true
cd ../ # Go back to the previous directory
pwd
```

Back two directories:

```{bash}
#| echo: true
cd ../../ # Go back two directories
pwd
```
:::
:::
:::
:::

## Navigation

:::{style="font-size: 20px;"}
:::{.columns}
:::{.column width="50%"}
Beware of directory names that contain spaces. Say you have a directory called "My Documents". (I'm looking at you, Windows.)

- Why won't `$ cd My Documents` work?
- Bash syntax is super pedantic about spaces and ordering. Here it thinks that "My" and "Documents" are separate arguments.
- How to deal with it:
  -   Use quotation marks: `$ cd "My Documents"`.
  -   Use Tab completion to automatically "escape" the space: `$ cd My\ Documents`.
  -   Don't use spaces in file and folder names. [Just don't.]{.alert}
  -   Files and folders should be named in lowercase and use dashes or
    snake_case. These are useful conventions!
  - For instance: `assignment-05` or `assignment_05`
:::

::: {.column width="50%"}
![](figures/expanding-brain.jpg){width="70%"}
:::
:::
:::

## More navigation commands: A cheat sheet

:::{style="margin-top: 30px; font-size: 21px;"}
:::{.columns}
:::{.column width="50%"}
- `ls` (list): Show files and directories in the current directory
- `ls -l`: Long listing format with detailed information
- `ls -a`: Show hidden files (those starting with a dot)
- `ls -lh`: Long listing format with human-readable sizes
- `ls -R`: List subdirectories recursively
- `pwd` (print working directory): Show the current directory path
- `cd` (change directory): Change the current working directory
- `cd -`: Go back to the previous directory
- `.`: Refers to the current directory
- `..`: Refers to the parent directory
- `~`: Refers to the home directory
:::

:::{.column width="50%"}
- `mkdir`: Create a new directory
- `touch`: Create a new empty file or update timestamps
- `cp`: Copy files or directories
- `mv`: Move or rename files or directories
- `rm`: Remove files (use with caution!)
- `rmdir`: Remove empty directories
- `cat`: Display file contents
- `find`: Search for files and directories

For a detailed overview, click [here](https://effective-shell.com/part-1-transitioning-to-the-shell/navigating-your-system/)
:::
:::
:::

## Shell navigation exercise

:::{style="margin-top: 30px; font-size: 22px;"}
Follow these steps to practice using basic shell commands. Type each command
and observe the results.

1. Open your terminal and navigate to your home directory: `cd ~`
2. Create a new directory called "practice" and change into it: `mkdir practice && cd practice`
3. Create two empty files called "file1.txt" and "file2.txt": `touch file1.txt file2.txt`
4. List the contents of the directory: `ls`
5. Move file2.txt to a new name (rename), file3.txt: `mv file2.txt file3.txt`
6. List the contents again to verify the change, then return to the home
   directory: `ls && cd ~`
7. Remove the "practice" directory and its contents: `rm -rf practice`
8. Verify that the directory has been removed: `ls`
:::

## Shell navigation exercise to try at home

:::{style="margin-top: 30px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}  
1. Open your terminal and navigate to your home directory: `cd ~`
2. Create a new directory called "shell_practice": `mkdir shell-practice`
3. Change into the new directory: `cd shell-practice`
4. Create three empty files called file1.txt, file2.txt, and file3.txt: `touch file1.txt file2.txt file3.txt`
5. List the contents of the directory: `ls`
6. Create a subdirectory called "subdir": `mkdir subdir`
:::

:::{.column width="50%"}
7. Move file2.txt into the subdirectory: `mv file2.txt subdir/`
8. Copy file1.txt to a new file called file4.txt: `cp file1.txt file4.txt`
9. List the contents of the current directory and the subdirectory: `ls -R`
10. Change to the parent directory: `cd ..`
11. Remove the entire shell_practice directory and its contents: `rm -r shell-practice`
12. Verify that the directory has been removed: `ls`

Bonus: Try using the `man` command to learn more about any of the commands you've used.

- Were there any commands that surprised you?
- Which commands did you find most useful?
:::
:::
:::

## Summary
### Today we...

:::{style="margin-top:40px; font-size: 24px;"}
:::{.incremental}
- Explored the command line's role in data science and programming
- Discussed the Unix philosophy and the significance of the shell
- Covered basic shell commands like `pwd`, `ls`, and `cd` for file system navigation
- Introduced special symbols such as `~`, `.`, and `..` for directory navigation
- Practiced executing these commands in the shell environment
:::
:::

## Next class

:::{style="margin-top:40px; font-size: 24px;"}
:::{.columns}
:::{.column width="40%"}
- We will learn a bit more about the command line 🤓
- More specifically, we will learn about [shell scripting](https://en.wikipedia.org/wiki/Shell_script) to automate tasks and how to deal with text files
- And after that, we will see how to use [Git](https://git-scm.com/) and [GitHub](https://github.com) for version control and collaboration
:::

:::{.column width="60%"}
:::{style="text-align: center; margin-top: -30px;"}
![](figures/lecture.png)
:::
:::
:::
:::

# Questions? 😉 {background-color="#2d4563"}

# Thank you very much and see you next class! 😊 🙏🏼{background-color="#2d4563"}
