---
title: QTM 350 - Data Science Computing
subtitle: Lecture 18 - SQLite and Python
author:
  - name: Danilo Freire
    email: danilo.freire@emory.edu
    affiliations: "Department of Data and Decision Sciences <br> Emory University"
format:
  clean-revealjs:
    self-contained: true
    code-overflow: wrap
    footer: "[SQLite and Python](https://raw.githack.com/danilofreire/qtm350/main/lectures/lecture-18/18-sql-python.html)"
transition: slide
transition-speed: default
scrollable: true
engine: jupyter
revealjs-plugins:
  - fontawesome
  - multimodal
editor:
  render-on-save: true
---

# Hello! Great to see you again! üòä {background-color="#2d4563"}

# Lecture overview üìö {background-color="#2d4563"}

## Lecture overview

:::{style="margin-top: 50px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
### Last time we learned: 

- What are relational databases and why they are still important in data science 
- How to create databases, tables, and insert data using basic SQL commands 
- How to perform queries with `SELECT`, `WHERE` and `ORDER BY` 
- Group data with `GROUP BY` and filter groups with `HAVING` 
- Statistics with `COUNT`, `SUM`, `AVG`, `MIN`, and `MAX` 
- That was a nice revision! ü§ì 
- SQLite is generally easier to set up as it's often file-based or in-memory
:::

:::{.column width="50%"}
### Today we will learn: 

- How to connect SQLite with Python, because we love Python! üêç üòÇ 
- We will use the built-in `sqlite3` library together with `pandas` 
- Other SQL commands, such as `LIKE`, `IN`, `BETWEEN`, `CASE`, window functions, and string functions like `SUBSTR` and `LENGTH` 
- How to fill missing data with `COALESCE` 
- How to use database cursors and fetch results (`fetchall`, `fetchone`) 
- If time allows, we will also see how to pivot tables using `CASE`
- Let's get started! üöÄ
:::
:::
:::

# Connecting SQLite with Python üêç {background-color="#2d4563"}

## Connecting and Creating a Cursor

:::{style="margin-top: 50px; font-size: 22px;"}
- To interact with an SQLite database from Python, we first need to establish a connection and then create a cursor.
- The [connection]{.alert} links our script to the database file.
- The [cursor]{.alert} is like a handle we use to send SQL commands and manage results.

```{python}
#| echo: true
#| eval: true
import sqlite3

db_file = 'lecture18.db' # Database filename

# 1. Connect to the database (creates file if needed)
conn = sqlite3.connect(db_file) 

# 2. Create a cursor object to execute commands
cur = conn.cursor()
```
:::

# Executing SQL in Python {background-color="#2d4563"}

## Creating Tables

:::{style="margin-top: 50px; font-size: 22px;"}
- We define the structure of our data using `CREATE TABLE`.
- Use `cursor.execute()` to run the command and `conn.commit()` to [save]{.alert} the change.

```{python}
#| echo: true
#| eval: true
# Use triple quotes for multi-line SQL
# Drop table if exists 
sql_drop = '''
DROP TABLE IF EXISTS drivers; 
'''

# Execute the SQL command
cur.execute(sql_drop)

# Create a new table named 'drivers'
sql_create = '''
CREATE TABLE drivers (
    driver_id INTEGER PRIMARY KEY AUTOINCREMENT,
    driver_name TEXT,
    team TEXT,
    nationality TEXT,
    victories INTEGER
);
'''
# Execute the SQL command
cur.execute(sql_create)

# Commit the transaction to save the table
conn.commit() 

# Check if the table was created
cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='drivers';")
```
:::

## Inserting Data

:::{style="margin-top: 50px; font-size: 22px;"}
- Once the table exists, we populate it using `INSERT INTO`.
- Again, `cursor.execute()` runs the command, and `conn.commit()` [makes the insertions permanent]{.alert}.

```{python}
#| echo: true
#| eval: true
# Insert a few rows
cur.execute("INSERT INTO drivers (driver_name, team, nationality, victories) VALUES ('Lewis Hamilton', 'Mercedes', 'British', 103);")
cur.execute("INSERT INTO drivers (driver_name, team, nationality, victories) VALUES ('Max Verstappen', 'Red Bull Racing', 'Dutch', 55);")
cur.execute("INSERT INTO drivers (driver_name, team, nationality, victories) VALUES ('Fernando Alonso', 'Aston Martin', NULL, NULL);")
cur.execute("INSERT INTO drivers (driver_name, team, nationality) VALUES ('Charles Leclerc', 'Ferrari', 'Mon√©gasque');") 

# Commit the insertions
conn.commit()
```
:::

## Fetching All Results (`fetchall`) and One Result (`fetchone`)

:::{style="margin-top: 50px; font-size: 22px;"}
- After a `SELECT` query, `fetchall()` retrieves [all results at once]{.alert} into a list of tuples.
- Useful if you need the full dataset immediately, but can use more memory for large results.

```{python}
#| echo: true
#| eval: true
cur.execute('SELECT driver_id, driver_name, team FROM drivers') 
all_rows = cur.fetchall() # Get the list of tuples

# Print the fetched data
for row in all_rows:
    print(row) 
```

- `fetchone()` retrieves rows [one by one]{.alert}. Each call gets the next available row.
- Returns `None` when no more rows are left. Good for processing sequentially or just getting the top item.

```{python}
#| echo: true
#| eval: true
cur.execute('SELECT driver_id, driver_name FROM drivers ORDER BY driver_id')

row1 = cur.fetchone()
print(row1) # First row

row2 = cur.fetchone()
print(row2) # Second row
```
:::

## Iterating Over the Cursor

:::{style="margin-top: 50px; font-size: 22px;"}
- A more "Pythonic" and [memory-efficient]{.alert} way to process results row-by-row is to iterate directly over the cursor.

```{python}
#| echo: true
#| eval: true
# Execute the query
query = "SELECT driver_name, team FROM drivers WHERE driver_name LIKE 'M%'"

# Loop directly over the cursor object after execute
for row_tuple in cur.execute(query):
     print(row_tuple) 
```
:::

# Filtering Data {background-color="#2d4563"}

## `IN` and `BETWEEN` Operators

:::{style="margin-top: 50px; font-size: 22px;"}
- Use `IN` to check if a column's value matches [any value in a specified list]{.alert}.

```{python}
#| echo: true
#| eval: true
query_in = "SELECT driver_name, team FROM drivers WHERE team IN ('Ferrari', 'Mercedes')" 
cur.execute(query_in)
for row in cur.fetchall():
    print(row)
```

- `NOT IN` works similarly to exclude values in the list.
```{python}
#| echo: true
#| eval: true
query_not_in = "SELECT driver_name, team FROM drivers WHERE team NOT IN ('Ferrari', 'Mercedes')" 
cur.execute(query_not_in)
for row in cur.fetchall():
    print(row)
```
- `BETWEEN` checks if a value is within a specified range. [Inclusive]{.alert} of the endpoints.

```{python}
#| echo: true
#| eval: true
query_between = "SELECT driver_name, victories FROM drivers WHERE victories BETWEEN 10 AND 60" 
cur.execute(query_between)
for row in cur.fetchall():
    print(row)
```

- `NOT BETWEEN` excludes values within the specified range.
:::

## `LIKE` Operator: Basic Patterns

:::{style="margin-top: 50px; font-size: 22px;"}
- `LIKE` enables simple pattern matching in text strings.
  - [`%`]{.alert}: Matches any sequence (including none) of characters.
  - [`_`]{.alert}: Matches exactly one character.

```{python}
#| echo: true
#| eval: true
# Starts with 'L'
cur.execute("SELECT driver_name FROM drivers WHERE driver_name LIKE 'L%'")
for row in cur.fetchall(): print(row)
```

```{python}
#| echo: true
#| eval: true
# Ends with 'Racing'
cur.execute("SELECT team FROM drivers WHERE team LIKE '%Racing'")
for row in cur.fetchall(): print(row)
```

```{python}
#| echo: true
#| eval: true
# 'o' as the second letter
cur.execute("SELECT driver_name FROM drivers WHERE driver_name LIKE '_o%'")
for row in cur.fetchall(): print(row)
```
:::

## `LIKE` Operator: Case Sensitivity and `NOT LIKE`

:::{style="margin-top: 50px; font-size: 22px;"}
- SQLite `LIKE` is case-insensitive for ASCII by default. Use `LOWER()`/`UPPER()` for [reliable, explicit case handling]{.alert}.

```{python}
#| echo: true
#| eval: true
# Case-insensitive search for names starting with 'l'
cur.execute("SELECT driver_name FROM drivers WHERE LOWER(driver_name) LIKE 'l%'")
for row in cur.fetchall(): print(row)
```

- You can also use `COLLATE NOCASE` to make a specific comparison case-insensitive. [This is a more general (and recommended) approach.]{.alert}

```{python}
#| echo: true
#| eval: true
# Case-insensitive search for names starting with 'l' using COLLATE
cur.execute("SELECT driver_name FROM drivers WHERE driver_name LIKE 'l%' COLLATE NOCASE")

for row in cur.fetchall(): print(row)
```

- Use `NOT LIKE` to find strings that [do not match]{.alert} the pattern.

:::

## Try it yourself! ü§ì {#sec:exercise01}

:::{style="margin-top: 50px; font-size: 24px;"}
- Practice time! Use `cur.execute()` and fetching/looping.
- Find all drivers whose names start with 'M'.
- Find drivers whose nationality has exactly 7 characters ([`LENGTH()`]{.alert} function might be useful).
- List drivers whose names start with 'L' [or]{.alert} 'M'.
- Find drivers with 1 to 10 victories ([`BETWEEN`]{.alert}).
- [[Appendix 01]{.button}](#sec:appendix01)
:::

# Handling Missing Data {background-color="#2d4563"}

## Finding NULLs (`IS NULL`)  and `COALESCE`

:::{style="margin-top: 50px; font-size: 22px;"}
- SQL represents missing values as `NULL`. Use `IS NULL` to find them. [`IS NOT NULL` finds rows with values]{.alert}.

```{python}
#| echo: true
#| eval: true
cur.execute("SELECT driver_name, victories FROM drivers WHERE victories IS NULL")
for row in cur.fetchall(): print(row)
```

- `COALESCE(value1, value2, ...)` is useful for replacing `NULL`s with a default value. It returns the [first non-NULL expression]{.alert} in its arguments.

```{python}
#| echo: true
#| eval: true
# If 'victories' is NULL, display 0 instead.
cur.execute("SELECT driver_name, COALESCE(victories, 0) AS victories_filled FROM drivers")
for row in cur.fetchall(): print(row)
```
:::

## `COALESCE` with Subqueries

:::{style="margin-top: 50px; font-size: 22px;"}
- The default value in `COALESCE` can be dynamic, calculated by a [subquery]{.alert}.

```{python}
#| echo: true
#| eval: true
query_coalesce_sub = '''
SELECT 
  driver_name,
  COALESCE(victories, 
    -- Subquery calculates average victories from non-NULL rows
    (SELECT CAST(AVG(victories) AS INTEGER) 
     FROM drivers 
     WHERE victories IS NOT NULL) 
  ) AS victories_imputed
FROM drivers; 
''' 
cur.execute(query_coalesce_sub)
for row in cur.fetchall(): print(row)
```
- Here, `NULL` victories are replaced by the average of non-NULL victories.
:::

# Window Functions {background-color="#2d4563"}

## Introduction to Window Functions

:::{style="margin-top: 50px; font-size: 21px;"}
- Window functions compute values across a set of rows (a "window") related to the current row, without collapsing them like `GROUP BY`.
- Essential for ranking, running totals, moving averages, etc.
- Basic syntax involves the [`OVER()`]{.alert} clause.
- [Requires SQLite version 3.25.0 or newer]{.alert}.

```{python}
#| echo: true
#| eval: true
# Add more data for better examples
more_drivers_data = [
    ('Valtteri Bottas', 'Mercedes', 'Finnish', 10),
    ('Sergio Perez', 'Red Bull Racing', 'Mexican', 5),
    ('Lando Norris', 'McLaren', 'British', 2),
    ('Esteban Ocon', 'Alpine', 'French', 1) 
]
# Check if data already exists to avoid duplicates 
cur.execute("SELECT COUNT(*) FROM drivers WHERE driver_name = 'Valtteri Bottas'")
if cur.fetchone()[0] == 0:
    cur.executemany('INSERT INTO drivers (driver_name, team, nationality, victories) VALUES (?, ?, ?, ?)', more_drivers_data)
    conn.commit()
    print(f"Added {len(more_drivers_data)} more drivers.")
else:
    print("Additional drivers already exist.")


# Check SQLite Version
cur.execute("SELECT sqlite_version();")
print(f"SQLite Version: {cur.fetchone()[0]}")
```
:::

## Window Functions: `AVG` and `RANK`

:::{style="margin-top: 50px; font-size: 21px;"}
- Let's see common window functions in action:
- `AVG(...) OVER ()`: Average over the entire query result.
- `AVG(...) OVER (PARTITION BY col)`: Average within groups (partitions) defined by `col`.
- `RANK() OVER (ORDER BY col)`: Assigns rank based on `col` ([gaps possible for ties]{.alert}).

```{python}
#| echo: true
#| eval: true
query_window_avg_rank = '''
SELECT 
    driver_name, team, victories,
    ROUND(AVG(victories) OVER (), 2) AS avg_overall, 
    ROUND(AVG(victories) OVER (PARTITION BY team), 2) AS avg_team, 
    RANK() OVER (ORDER BY victories DESC) AS rank_overall 
FROM drivers
WHERE victories IS NOT NULL 
ORDER BY rank_overall; 
'''
cur.execute(query_window_avg_rank)
for row in cur.fetchall(): print(row)
```
:::

## Window Functions vs. `GROUP BY`

:::{style="margin-top: 50px; font-size: 21px;"}
- A key difference: `GROUP BY` [reduces]{.alert} the number of rows to one per group. Window functions [maintain]{.alert} all original rows and add new columns based on the window calculation.

```{python}
#| echo: true
#| eval: true
# GROUP BY example (summarizes)
cur.execute("SELECT team, ROUND(AVG(victories), 2) FROM drivers WHERE victories IS NOT NULL GROUP BY team")
print("--- GROUP BY Output (Collapsed) ---")
for row in cur.fetchall(): print(row)

# Window Function example (adds detail to each row)
cur.execute('''
    SELECT driver_name, team, victories, 
           ROUND(AVG(victories) OVER (PARTITION BY team), 2) as avg_in_team
    FROM drivers 
    WHERE victories IS NOT NULL ORDER BY team, victories DESC
''')
print("\n--- Window Function Output (All Rows) ---")
for row in cur.fetchall(): print(row)
```
:::

## Try it yourself! ü§ì {#sec:exercise02}

:::{style="margin-top: 50px; font-size: 24px;"}
- Use a window function:
- Select `driver_name`, `nationality`, `victories`.
- Add `rank_nationality`: rank drivers by `victories` [within]{.alert} each `nationality`. ([`PARTITION BY`]{.alert} needed).
- Exclude `NULL` victories.
- Order by `nationality`, then `rank_nationality`.
- Use `cur.execute()` and fetching/looping.
- [[Appendix 02]{.button}](#sec:appendix02)
:::

# String Manipulation {background-color="#2d4563"}

## Basic String Functions

:::{style="margin-top: 50px; font-size: 22px;"}
- SQLite provides standard functions for text processing.
- `LENGTH(str)`, `UPPER(str)`, `LOWER(str)`.
- `SUBSTR(str, start, length)` extracts a portion of the string ([start is 1-indexed]{.alert}).

```{python}
#| echo: true
#| eval: true
query_str1 = '''
SELECT driver_name, 
    LENGTH(driver_name) AS len,
    UPPER(driver_name) AS upper,
    LOWER(driver_name) AS lower,
    SUBSTR(driver_name, 1, 4) AS first_four -- Get first 4 characters
FROM drivers LIMIT 4;
'''
cur.execute(query_str1)
for row in cur.fetchall(): print(row)
```
:::

## More String Functions

:::{style="margin-top: 50px; font-size: 22px;"}
- `TRIM(str)` removes leading/trailing whitespace.
- `REPLACE(str, find, replace)` substitutes text.
- `INSTR(str, find)` finds the starting position of `find` within `str` ([0 if not found]{.alert}).
- The [`||`]{.alert} operator concatenates (joins) strings.

```{python}
#| echo: true
#| eval: true
query_str2 = '''
SELECT driver_name, 
    REPLACE(driver_name, ' ', '_') AS replaced_space,
    INSTR(LOWER(driver_name), 'a') AS first_a_pos, 
    'Driver: ' || driver_name AS labelled_name -- Concatenation
FROM drivers LIMIT 4;
'''
cur.execute(query_str2)
for row in cur.fetchall(): print(row)
```
:::

# Conditional Logic: CASE {background-color="#2d4563"}

## Basic `CASE` Statement

:::{style="margin-top: 50px; font-size: 22px;"}
- The `CASE` statement is SQL's way of implementing [if-then-else logic]{.alert} within a query.
- `CASE WHEN condition THEN result ELSE default_result END`

```{python}
#| echo: true
#| eval: true
query_case1 = '''
SELECT driver_name, victories,
    CASE 
        WHEN victories > 50 THEN 'Legend' 
        ELSE 'Great Driver (or N/A)'     
    END AS category 
FROM drivers;
'''
cur.execute(query_case1)
for row in cur.fetchall(): print(row)
```
:::

## `CASE` with Multiple Conditions

:::{style="margin-top: 50px; font-size: 22px;"}
- You can chain multiple `WHEN` clauses. The [first condition that evaluates to true]{.alert} determines the result for that row. The optional `ELSE` handles cases where no `WHEN` is true.

```{python}
#| echo: true
#| eval: true
query_case2 = '''
SELECT driver_name, victories,
    CASE 
        WHEN victories > 100 THEN 'All-Time Great'
        WHEN victories > 50 THEN 'Legend'
        WHEN victories >= 10 THEN 'Race Winner'
        WHEN victories > 0 THEN 'Podium Potential'
        ELSE 'Data Missing or Zero Wins' 
    END AS status
FROM drivers ORDER BY victories DESC NULLS LAST;
'''
cur.execute(query_case2)
for row in cur.fetchall(): print(row)
```
:::

## `CASE` for Conditional NULL Handling

:::{style="margin-top: 50px; font-size: 22px;"}
- `CASE` offers more nuanced control over handling `NULL`s compared to just `COALESCE`, allowing checks on [other columns]{.alert}.

```{python}
#| echo: true
#| eval: true
query_case_null = '''
SELECT driver_name, 
    -- Fill nationality based on name if NULL
    CASE 
        WHEN nationality IS NULL AND driver_name = 'Fernando Alonso' THEN 'Spanish'
        WHEN nationality IS NULL THEN 'Unknown' 
        ELSE nationality
    END AS nationality_filled,
    -- Fill victories based on team if NULL
    CASE 
        WHEN victories IS NULL AND team = 'Aston Martin' THEN 32 -- Educated guess! 
        WHEN victories IS NULL THEN 0 
        ELSE victories
    END AS victories_filled
FROM drivers WHERE driver_name LIKE 'F%' OR driver_name LIKE 'L%'; -- Limit output
'''
cur.execute(query_case_null)
for row in cur.fetchall(): print(row)
```
:::

## Try it yourself! ü§ì {#sec:exercise03}

:::{style="margin-top: 50px; font-size: 24px;"}
- Use `CASE` to create `driver_level`:
  - 'Beginner' if victories < 10 (and not NULL)
  - 'Intermediate' if 10 <= victories <= 50
  - 'Expert' if victories > 50
  - 'Unknown' if victories is NULL [Handle NULL first!]{.alert}
- Select `driver_name`, `victories`, `driver_level`.
- Use `cur.execute()` and fetching/looping.
- [[Appendix 03]{.button}](#sec:appendix03) 
:::

# Using SQL with `pandas` üêº {background-color="#2d4563"}

## Reading Data with `pandas.read_sql`

:::{style="margin-top: 50px; font-size: 21px;"}
- Reading data using loops and `fetchall()` works, but `pandas` makes it much easier for analysis.
- [`pandas.read_sql()`]{.alert} executes a `SELECT` query and loads the results directly into a DataFrame.

```{python}
#| echo: true
#| eval: true
import pandas as pd # Import pandas

# Pass the SQL query and the connection object
df = pd.read_sql('SELECT * FROM drivers', conn) 
print(df) 
```

- This combines execution and fetching into one step, returning a structured table.
:::

## `read_sql` with Any `SELECT` Query

:::{style="margin-top: 50px; font-size: 21px;"}
- You can use complex `SELECT` statements, including joins, filtering, ordering, etc., within `read_sql`.

```{python}
#| echo: true
#| eval: true
query_pd = """
SELECT driver_name, team, victories 
FROM drivers 
WHERE victories > 5 OR victories IS NULL
ORDER BY team
"""
df_filtered_ordered = pd.read_sql(query_pd, conn)
print(df_filtered_ordered)
```
- `pandas` handles retrieving all the data specified by your SQL query.
:::

## Manipulating DataFrames from SQL

:::{style="margin-top: 50px; font-size: 21px;"}
- Once loaded, the DataFrame behaves like any other `pandas` DataFrame. Apply all your data manipulation skills!

```{python}
#| echo: true
#| eval: true
# df was loaded previously
avg_vic_pd = df.groupby('team')['victories'].mean().dropna()
print(avg_vic_pd)
```

```{python}
#| echo: true
#| eval: true
# Example using pandas .query() method for filtering
print(df.query('victories > 50 and nationality == "British"'))
```
:::

## Writing DataFrames to SQL (`to_sql`)

:::{style="margin-top: 50px; font-size: 21px;"}
- The reverse is also easy: `DataFrame.to_sql()` writes the DataFrame's contents into a database table.

```{python}
#| echo: true
#| eval: true
# Example: Create a DataFrame with British drivers
df_british = df[df['nationality'] == 'British'].copy()

# Write to a new table named 'british_drivers'
# index=False: [Important!]{.alert} Prevents pandas index from becoming a DB column.
df_british.to_sql('british_drivers', conn, if_exists='replace', index=False)

# Verify by reading it back using pandas
print(pd.read_sql('SELECT * FROM british_drivers', conn))
```
:::

## Try it yourself! ü§ì {#sec:exercise04}

:::{style="margin-top: 50px; font-size: 20px;"}
- 1. Create `employees` table (`id`, `name`, `dept`, `salary`) using `cursor`.
- 2. Insert data for Alice (HR, 50k), Bob (IT, 60k), Charlie (HR, 70k), David (IT, 80k) using `cursor`. Commit.
- 3. Read the full `employees` table into `df_employees` using [`pd.read_sql()`]{.alert}. Print it.
- 4. Using [`df_employees`]{.alert}, calculate and print the average salary per department.
- [[Appendix 04]{.button}](#sec:appendix04)
:::

# Pivot tables in SQL üìÑ {background-color="#2d4563"}

## Pivot Setup: Student Scores

:::{style="margin-top: 50px; font-size: 20px;"}
- Pivoting reshapes data from "long" to "wide" format. SQLite lacks a dedicated `PIVOT` command, so we use conditional aggregation.
- Let's set up the `student_scores` data first.

```{python}
#| echo: true
#| eval: true
# Create and populate student_scores table
cur.execute('DROP TABLE IF EXISTS student_scores;')
cur.execute('CREATE TABLE student_scores (student_name TEXT, subject TEXT, score INTEGER, term TEXT);')
scores_data = [
    ('Alice', 'Maths', 90, 'Q1'), ('Alice', 'Maths', 80, 'Q2'), ('Alice', 'Science', 80, 'Q1'), ('Alice', 'Science', 75, 'Q2'),
    ('Bob', 'Maths', 80, 'Q1'), ('Bob', 'Maths', 100, 'Q2'), ('Bob', 'Science', 80, 'Q1'), ('Bob', 'Science', 70, 'Q2'),
    ('Charles', 'Maths', 70, 'Q1'), ('Charles', 'Maths', 75, 'Q2'), ('Charles', 'Science', 90, 'Q1'), ('Charles', 'Science', 85, 'Q2')
]
cur.executemany('INSERT INTO student_scores VALUES (?, ?, ?, ?)', scores_data)
conn.commit()
print("Created and populated student_scores.")

# Display raw data using pandas
print(pd.read_sql('SELECT * FROM student_scores ORDER BY student_name, term, subject', conn))
```
:::

## Pivoting with `CASE` and `GROUP BY`

:::{style="margin-top: 50px; font-size: 20px;"}
- The technique involves using an aggregate function (`AVG`, `SUM`, etc.) around a `CASE` statement for each desired new column. [`GROUP BY`]{.alert} ensures one row per student.

```{python}
#| echo: true
#| eval: true
pivot_query = '''
SELECT 
    student_name,
    -- Avg Maths: Only average score WHEN subject is Maths
    AVG(CASE WHEN subject = 'Maths' THEN score END) as Avg_Maths, 
    -- Avg Science: Only average score WHEN subject is Science
    AVG(CASE WHEN subject = 'Science' THEN score END) as Avg_Science
FROM student_scores
GROUP BY student_name 
ORDER BY student_name;
'''
# Display the pivoted result using pandas
df_pivot = pd.read_sql(pivot_query, conn)
print(df_pivot)
```
- [`AVG` ignores NULLs]{.alert}, which are produced by the `CASE` statement when the subject doesn't match.
:::

# Conclusion üìö {background-color="#2d4563"}

## Conclusion

:::{style="margin-top: 50px; font-size: 22px;"}
:::{.columns}
:::{.column width="50%"}
- `sqlite3` provides the basic tools to interact with SQLite from Python.
- Key steps: `connect()`, `cursor()`, `execute()`, [`commit()`]{.alert}.
- Fetch results using `fetchone()`, `fetchall()`, or by iterating the cursor.
- Common SQL commands work as expected.
- Window functions require [modern SQLite versions]{.alert}.
- Use `CASE` + `GROUP BY` for pivoting.
- [`pandas.read_sql()`]{.alert} greatly simplifies loading data for analysis.
- `df.to_sql()` saves DataFrames back to the database.
:::

:::{.column width="50%"}
:::{style="text-align: center;"}
[![](figures/pandasql5.jpg){width="100%"}](https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html){data-modal-type="iframe"}

Source: [Susan Ibach (2020)](https://susanibach.wordpress.com/2020/01/07/pandas-for-sql-lovers-select-from-table/) 
:::
:::
:::
:::

# And that's all for today! üöÄ {background-color="#2d4563"}

# Have a great day! üòä {background-color="#2d4563"}

```{python}
#| echo: false
#| eval: true
# Clean up: Close the connection
if 'conn' in locals() and conn:
    conn.close()
    print("\nSQLite connection closed.")
```

## Appendix 01 {#sec:appendix01}

:::{style="margin-top: 50px; font-size: 22px;"}
**Exercise Solutions** (Using standard `sqlite3` fetching)

```{python}
#| echo: true
#| eval: true
import sqlite3 
db_file = 'lecture18.db' 
conn = sqlite3.connect(db_file) 
cur = conn.cursor() 

# Find M names
cur.execute("SELECT * FROM drivers WHERE driver_name LIKE 'M%';")
print("--- Drivers starting with M ---")
for row in cur.fetchall(): print(row)

# Find 7 char nationalities
cur.execute("SELECT * FROM drivers WHERE LENGTH(nationality) = 7;")
print("\n--- Nationalities with 7 chars ---")
for row in cur.fetchall(): print(row)

# Find L or M names
cur.execute("SELECT * FROM drivers WHERE driver_name LIKE 'L%' OR driver_name LIKE 'M%';")
print("\n--- Drivers starting with L or M ---")
for row in cur.fetchall(): print(row)

# Find 1-10 wins
cur.execute("SELECT * FROM drivers WHERE victories BETWEEN 1 AND 10;")
print("\n--- Drivers with 1-10 wins ---")
for row in cur.fetchall(): print(row)

conn.close()
```

[[Back to exercise]{.button}](#sec:exercise01)
:::

## Appendix 02 {#sec:appendix02}

:::{style="margin-top: 50px; font-size: 22px;"}
**Exercise Solution** (Using standard `sqlite3` fetching)

```{python}
#| echo: true
#| eval: true
import sqlite3
db_file = 'lecture18.db'
conn = sqlite3.connect(db_file)
cur = conn.cursor() 

# Query and display using standard fetch
query_rank_nationality = '''
SELECT 
    driver_name, nationality, victories,
    RANK() OVER (PARTITION BY nationality ORDER BY victories DESC) AS rank_nationality
FROM drivers
WHERE victories IS NOT NULL 
ORDER BY nationality, rank_nationality; 
'''
cur.execute(query_rank_nationality)
print("\n--- Drivers ranked by victories within nationality ---")
for row in cur.fetchall(): print(row)

conn.close()
```

[[Back to exercise]{.button}](#sec:exercise02)
:::


## Appendix 03 {#sec:appendix03}

:::{style="margin-top: 50px; font-size: 22px;"}
**Exercise Solution** (Using standard `sqlite3` fetching)

```{python}
#| echo: true
#| eval: true
import sqlite3
db_file = 'lecture18.db'
conn = sqlite3.connect(db_file)
cur = conn.cursor()

query_driver_level = '''
SELECT 
    driver_name, victories,
    CASE 
        WHEN victories IS NULL THEN 'Unknown' 
        WHEN victories > 50 THEN 'Expert'
        WHEN victories BETWEEN 10 AND 50 THEN 'Intermediate' 
        WHEN victories < 10 THEN 'Beginner' 
    END AS driver_level
FROM drivers
ORDER BY victories DESC NULLS LAST; 
'''
cur.execute(query_driver_level)
print("--- Driver classification using CASE ---")
for row in cur.fetchall(): print(row)

conn.close()
```

[[Back to exercise]{.button}](#sec:exercise03)
:::

## Appendix 04 {#sec:appendix04}

:::{style="margin-top: 50px; font-size: 22px;"}
**Exercise Solution** (Using `pandas` as requested)

```{python}
#| echo: true
#| eval: true
import pandas as pd 
import sqlite3
import os

db_file = 'lecture18.db' 
conn = sqlite3.connect(db_file)
cur = conn.cursor() 

# 1. Create employees table
cur.execute('DROP TABLE IF EXISTS employees;') 
cur.execute('''
CREATE TABLE employees (
    employee_id INTEGER PRIMARY KEY AUTOINCREMENT,
    employee_name TEXT, department TEXT, salary INTEGER
);''')

# 2. Insert data
employee_data = [
    ('Alice', 'HR', 50000), ('Bob', 'IT', 60000),
    ('Charlie', 'HR', 70000), ('David', 'IT', 80000)
]
cur.executemany('INSERT INTO employees (employee_name, department, salary) VALUES (?, ?, ?)', employee_data)
conn.commit()
print("Employees table created and populated.")

# --- Pandas part starts here ---
# 3. Read data with pandas
df_employees = pd.read_sql('SELECT * FROM employees', conn)
print("\n--- Employees DataFrame ---")
print(df_employees)

# 4. Compute average salary by department using pandas
avg_salary_dept = df_employees.groupby('department')['salary'].mean()
print("\n--- Average salary by department (pandas) ---")
print(avg_salary_dept)

conn.close()
```

[[Back to exercise]{.button}](#sec:exercise04)
:::

## Appendix 05 {#sec:appendix05}
### Cleaning an SQLite Database

:::{style="margin-top: 50px; font-size: 22px;"}
- **Option 1 (Easiest)**: [Delete the database file]{.alert}. Find `.db` file (`lecture18.db`) or use code:

```{python}
#| echo: true
#| eval: false 
import os
db_file_to_delete = 'lecture18.db' 
if os.path.exists(db_file_to_delete):
    try:
        # Ensure connection is closed first!
        os.remove(db_file_to_delete)
        print(f"Deleted database file: {db_file_to_delete}")
    except OSError as e:
        print(f"Error deleting file {db_file_to_delete}: {e}")
```

- **Option 2**: Drop all tables programmatically.

```{python}
#| echo: true
#| eval: false 
import sqlite3
db_file_to_clean = 'lecture18.db' 
conn_clean = sqlite3.connect(db_file_to_clean)
cur_clean = conn_clean.cursor()
cur_clean.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';")
tables = cur_clean.fetchall()
print(f"Tables to drop: {tables}")
for table_name_tuple in tables:
    cur_clean.execute(f"DROP TABLE IF EXISTS {table_name_tuple[0]}")
    print(f"Dropped table: {table_name_tuple[0]}")
conn_clean.commit()
conn_clean.close()
print("Finished dropping tables.")
```

[[Back to the lecture]{.button}](#sec:tables)
:::