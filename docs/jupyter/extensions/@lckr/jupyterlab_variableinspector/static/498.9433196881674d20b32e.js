"use strict";(self.webpackChunk_lckr_jupyterlab_variableinspector=self.webpackChunk_lckr_jupyterlab_variableinspector||[]).push([[498],{498:(e,n,t)=>{t.r(n),t.d(n,{default:()=>Q});var r=t(200),s=t(909),a=t(32),i=t(480),o=t(614),l=t(460),c=t(602),p=t(88);class d{constructor(e){this._isDisposed=!1,this._disposed=new c.Signal(this),this._inspected=new c.Signal(this),this._rendermime=null,this._connector=e,this._enabled=!1}get enabled(){return this._enabled}set enabled(e){this._enabled=e}get disposed(){return this._disposed}get isDisposed(){return this._isDisposed}get inspected(){return this._inspected}get rendermime(){return this._rendermime}dispose(){this.isDisposed||(this._isDisposed=!0,this._disposed.emit(),c.Signal.clearData(this))}performDelete(e){}}class _ extends d{constructor(e){var n;super(e.connector),this._handleQueryResponse=e=>{switch(e.header.msg_type){case"execute_result":{let n=e.content.data["text/plain"];"'"!==n.slice(0,1)&&'"'!==n.slice(0,1)||(n=n.slice(1,-1),n=n.replace(/\\"/g,'"').replace(/\\'/g,"'"));const t=JSON.parse(n),r={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:r,payload:t});break}case"display_data":{let n=e.content.data["text/plain"];"'"!==n.slice(0,1)&&'"'!==n.slice(0,1)||(n=n.slice(1,-1),n=n.replace(/\\"/g,'"').replace(/\\'/g,"'"));const t=JSON.parse(n),r={contextName:"",kernelName:this._connector.kernelName||""};this._inspected.emit({title:r,payload:t});break}}},this._queryCall=(e,n)=>{switch(n.header.msg_type){case"execute_input":{const e=n.content.code;e===this._queryCommand||e===this._matrixQueryCommand||e.startsWith(this._widgetQueryCommand)||this.performInspection();break}}},this._id=e.id,this._rendermime=null!==(n=e.rendermime)&&void 0!==n?n:null,this._queryCommand=e.queryCommand,this._matrixQueryCommand=e.matrixQueryCommand,this._widgetQueryCommand=e.widgetQueryCommand,this._changeSettingsCommand=e.changeSettingsCommand,this._deleteCommand=e.deleteCommand,this._initScript=e.initScript,this._setting=e.setting,this._ready=this._connector.ready.then((()=>{this._initOnKernel().then((e=>{this.performSettingsChange(),this._connector.iopubMessage.connect(this._queryCall)}))}));const t=(e,n)=>{this._inspected.emit({title:{contextName:"<b>Waiting for kernel...</b> "},payload:[]}),this._ready=n.then((()=>{this._initOnKernel().then((e=>{this.performSettingsChange(),this._connector.iopubMessage.connect(this._queryCall),this.performInspection()}))}))};this._setting.changed.connect((async()=>{await this._ready,this.performSettingsChange(),this.performInspection()})),this._connector.kernelRestarted.connect(t),this._connector.kernelChanged.connect(t)}get id(){return this._id}get ready(){return this._ready}performInspection(){if(!this.enabled)return;const e={code:this._queryCommand,stop_on_error:!1,store_history:!1};this._connector.fetch(e,this._handleQueryResponse)}performWidgetInspection(e){const n={code:this._widgetQueryCommand+"("+e+")",stop_on_error:!1,store_history:!1};return this._connector.execute(n)}performMatrixInspection(e,n=1e5){const t={code:this._matrixQueryCommand+"("+e+", "+n+")",stop_on_error:!1,store_history:!1},r=this._connector;return new Promise(((e,n)=>{r.fetch(t,(t=>{switch(t.header.msg_type){case"execute_result":{let n=t.content.data["text/plain"];n=n.replace(/^'|'$/g,""),n=n.replace(/\\"/g,'"'),n=n.replace(/\\'/g,"\\\\'");const r=JSON.parse(n),s=new p.JSONModel(r);e(s);break}case"error":console.log(t),n("Kernel error on 'matrixQuery' call!")}}))}))}performDelete(e){const n={code:this._deleteCommand+"('"+e+"')",stop_on_error:!1,store_history:!1};this._connector.fetch(n,this._handleQueryResponse)}performSettingsChange(){if(!this._changeSettingsCommand)return;const e={maxItems:this._setting.get("maxItems").composite},n={code:this._changeSettingsCommand(e),stop_on_error:!1,store_history:!1};this._connector.fetch(n,this._handleQueryResponse)}_initOnKernel(){const e={code:this._initScript,stop_on_error:!1,silent:!0};return this._connector.fetch(e,(()=>{}))}}class m extends d{constructor(e){super(e)}performInspection(){const e={contextName:". <b>Language currently not supported.</b> ",kernelName:this._connector.kernelName||""};this._inspected.emit({title:e,payload:[]})}performMatrixInspection(e,n){return new Promise(((e,n)=>{n("Cannot inspect matrices w/ the DummyHandler!")}))}performWidgetInspection(e){return this._connector.execute({code:"",stop_on_error:!1,store_history:!1})}}class u{static getScript(e){return new Promise(((n,t)=>{e in u.scripts?n(u.scripts[e]):t("Language "+e+" not supported yet!")}))}}u.py_script='import json\nimport sys\nfrom importlib import __import__\nfrom itertools import islice\nimport collections\nfrom IPython import get_ipython\nfrom IPython.core.magics.namespace import NamespaceMagics\n\n\n_jupyterlab_variableinspector_nms = NamespaceMagics()\n_jupyterlab_variableinspector_Jupyter = get_ipython()\n_jupyterlab_variableinspector_nms.shell = _jupyterlab_variableinspector_Jupyter.kernel.shell\n\n_jupyterlab_variableinspector_maxitems = 10\n\n__np = None\n__pd = None\n__pyspark = None\n__tf = None\n__K = None\n__torch = None\n__ipywidgets = None\n__xr = None\n\n\ndef _attempt_import(module):\n    try:\n        # Only "import" if it was already imported\n        if module in sys.modules:\n            return __import__(module)\n    except ImportError:\n        return None\n\n\ndef _check_imported():\n    global __np, __pd, __pyspark, __tf, __K, __torch, __ipywidgets, __xr\n\n    __np = _attempt_import(\'numpy\')\n    __pd = _attempt_import(\'pandas\')\n    __pyspark = _attempt_import(\'pyspark\')\n    __tf = _attempt_import(\'tensorflow\')\n    __K = _attempt_import(\'keras.backend\') or _attempt_import(\'tensorflow.keras.backend\')\n    __torch = _attempt_import(\'torch\')\n    __ipywidgets = _attempt_import(\'ipywidgets\')\n    __xr = _attempt_import(\'xarray\')\n\n\ndef _jupyterlab_variableinspector_changesettings(maxitems, **kwargs):\n    global _jupyterlab_variableinspector_maxitems\n\n    _jupyterlab_variableinspector_maxitems = maxitems\n\n\ndef _jupyterlab_variableinspector_getsizeof(x):\n    if type(x).__name__ in [\'ndarray\', \'Series\']:\n        return x.nbytes\n    elif __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return "?"\n    elif __tf and isinstance(x, __tf.Variable):\n        return "?"\n    elif __torch and isinstance(x, __torch.Tensor):\n        return x.element_size() * x.nelement()\n    elif __pd and type(x).__name__ == \'DataFrame\':\n        # DO NOT CALL df.memory_usage() for big dataframes as this can be very costly\n        # to the point of making the kernel unresponsive or crashing it\n        if len(x.columns) < 10_000:\n            return x.memory_usage().sum()\n        else:\n            return "?"\n    else:\n        return sys.getsizeof(x)\n\n\ndef _jupyterlab_variableinspector_getshapeof(x):\n    if __pd and isinstance(x, __pd.DataFrame):\n        return "%d rows x %d cols" % x.shape\n    if __pd and isinstance(x, __pd.Series):\n        return "%d rows" % x.shape\n    if __np and isinstance(x, __np.ndarray):\n        shape = " x ".join([str(i) for i in x.shape])\n        return "%s" % shape\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return "? rows x %d cols" % len(x.columns)\n    if __tf and isinstance(x, __tf.Variable):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __tf and isinstance(x, __tf.Tensor):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __torch and isinstance(x, __torch.Tensor):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if __xr and isinstance(x, __xr.DataArray):\n        shape = " x ".join([str(int(i)) for i in x.shape])\n        return "%s" % shape\n    if isinstance(x, list):\n        return "%s" % len(x)\n    if isinstance(x, dict):\n        return "%s keys" % len(x)\n    return None\n\n\ndef _jupyterlab_variableinspector_getcontentof(x):\n    # returns content in a friendly way for python variables\n    # pandas and numpy\n    if isinstance(x, (bool, str, int, float, type(None))):\n        content = str(x)\n    elif isinstance(x, (list, tuple)):\n        if len(x) <= _jupyterlab_variableinspector_maxitems:\n            content = str(x)\n        else:\n            content = "["\n            for i in range(_jupyterlab_variableinspector_maxitems):\n                content += f"{x[i]}, "\n            content += "...]"\n    elif isinstance(x, collections.abc.Mapping):\n        if len(x.keys()) <= _jupyterlab_variableinspector_maxitems:\n            content = str(x)\n        else:\n            first_ten_keys = list(islice(x.keys(), _jupyterlab_variableinspector_maxitems))\n            content = "{"\n            for idx, key in enumerate(first_ten_keys):\n                if idx > 0:\n                    content += ", "\n                content += f\'"{key}": {x[key]}\'\n            content += ", ...}"\n    elif __pd and isinstance(x, __pd.DataFrame):\n        if len(x.columns) <= _jupyterlab_variableinspector_maxitems:\n            colnames = \', \'.join(x.columns.map(str))\n            content = "Columns: %s" % colnames\n        else:\n            content = "Columns: "\n            for idx in range(_jupyterlab_variableinspector_maxitems):\n                if idx > 0:\n                    content += ", "\n                content += str(x.columns[idx])\n            content += ", ..."\n            return content\n    elif __pd and isinstance(x, __pd.Series):\n        content = str(x.values).replace(" ", ", ")[1:-1]\n        content = content.replace("\\n", "")\n    elif __np and isinstance(x, __np.ndarray):\n        content = x.__repr__()\n    elif __xr and isinstance(x, __xr.DataArray):\n        content = x.values.__repr__()\n    else:\n        content = str(x)\n\n    if len(content) > 150:\n        return content[:150] + " ..."\n    else:\n        return content\n\n\ndef _jupyterlab_variableinspector_is_matrix(x):\n    # True if type(x).__name__ in ["DataFrame", "ndarray", "Series"] else False\n    if __pd and isinstance(x, __pd.DataFrame):\n        return True\n    if __pd and isinstance(x, __pd.Series):\n        return True\n    if __np and isinstance(x, __np.ndarray) and len(x.shape) <= 2:\n        return True\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return True\n    if __tf and isinstance(x, __tf.Variable) and len(x.shape) <= 2:\n        return True\n    if __tf and isinstance(x, __tf.Tensor) and len(x.shape) <= 2:\n        return True\n    if __torch and isinstance(x, __torch.Tensor) and len(x.shape) <= 2:\n        return True\n    if __xr and isinstance(x, __xr.DataArray) and len(x.shape) <= 2:\n        return True\n    if isinstance(x, list):\n        return True\n    return False\n\n\ndef _jupyterlab_variableinspector_is_widget(x):\n    return __ipywidgets and issubclass(x, __ipywidgets.DOMWidget)\n\n\ndef _jupyterlab_variableinspector_dict_list():\n    _check_imported()\n    def keep_cond(v):\n        try:\n            obj = eval(v)\n            if isinstance(obj, (bool, str, list, tuple, collections.abc.Mapping, int, float, type(None))):\n                return True\n            if __tf and isinstance(obj, __tf.Variable):\n                return True\n            if __pd and __pd is not None and (\n                isinstance(obj, __pd.core.frame.DataFrame)\n                or isinstance(obj, __pd.core.series.Series)):\n                return True\n            if __xr and __xr is not None and isinstance(obj, __xr.DataArray):\n                return True\n            if str(obj)[0] == "<":\n                return False\n            if  v in [\'__np\', \'__pd\', \'__pyspark\', \'__tf\', \'__K\', \'__torch\', \'__ipywidgets\', \'__xr\']:\n                return obj is not None\n            if str(obj).startswith("_Feature"):\n                # removes tf/keras objects\n                return False\n            return True\n        except:\n            return False\n    values = _jupyterlab_variableinspector_nms.who_ls()\n    vardic = [\n        {\n            \'varName\': _v,\n            \'varType\': type(eval(_v)).__name__,\n            \'varSize\': str(_jupyterlab_variableinspector_getsizeof(eval(_v))),\n            \'varShape\': str(_jupyterlab_variableinspector_getshapeof(eval(_v))) if _jupyterlab_variableinspector_getshapeof(eval(_v)) else \'\',\n            \'varContent\': str(_jupyterlab_variableinspector_getcontentof(eval(_v))),\n            \'isMatrix\': _jupyterlab_variableinspector_is_matrix(eval(_v)),\n            \'isWidget\': _jupyterlab_variableinspector_is_widget(type(eval(_v)))\n        }\n        for _v in values if keep_cond(_v)\n    ]\n    return json.dumps(vardic, ensure_ascii=False)\n\n\ndef _jupyterlab_variableinspector_getmatrixcontent(x, max_rows=10000):\n    # to do: add something to handle this in the future\n    threshold = max_rows\n\n    if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        df = x.limit(threshold).toPandas()\n        return _jupyterlab_variableinspector_getmatrixcontent(df.copy())\n    elif __np and __pd and type(x).__name__ == "DataFrame":\n        if threshold is not None:\n            x = x.head(threshold)\n        x.columns = x.columns.map(str)\n        return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == "Series":\n        if threshold is not None:\n            x = x.head(threshold)\n        return x.to_json(orient="table", default_handler=_jupyterlab_variableinspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == "ndarray":\n        df = __pd.DataFrame(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        df = __K.get_value(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __torch and isinstance(x, __torch.Tensor):\n        df = x.cpu().numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif __xr and isinstance(x, __xr.DataArray):\n        df = x.to_numpy()\n        return _jupyterlab_variableinspector_getmatrixcontent(df)\n    elif isinstance(x, list):\n        s = __pd.Series(x)\n        return _jupyterlab_variableinspector_getmatrixcontent(s)\n\n\ndef _jupyterlab_variableinspector_displaywidget(widget):\n    display(widget)\n\n\ndef _jupyterlab_variableinspector_default(o):\n    if isinstance(o, __np.number): return int(o)\n    raise TypeError\n\n\ndef _jupyterlab_variableinspector_deletevariable(x):\n    exec("del %s" % x, globals())\n',u.r_script='library(repr)\n\n.ls.objects = function (pos = 1, pattern, order.by, decreasing = FALSE, head = FALSE,\n    n = 5)\n{\n    napply <- function(names, fn) sapply(names, function(x) fn(get(x,\n        pos = pos)))\n    names <- ls(pos = pos, pattern = pattern)\n    if (length(names) == 0) {\n        return(jsonlite::toJSON(data.frame()))\n    }\n    obj.class <- napply(names, function(x) as.character(class(x))[1])\n    obj.mode <- napply(names, mode)\n    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)\n    obj.size <- napply(names, object.size)\n    obj.dim <- t(napply(names, function(x) as.numeric(dim(x))[1:2]))\n    obj.content <- rep("NA", length(names))\n    has_no_dim <- is.na(obj.dim)[1:length(names)]\n    obj.dim[has_no_dim, 1] <- napply(names, length)[has_no_dim]\n    vec <- (obj.type != "function")\n    obj.content[vec] <- napply(names[vec], function(x) toString(x, width = 154)[1])\n\n    obj.rownames <- napply(names, rownames)\n    has_rownames <- obj.rownames != "NULL"\n    obj.rownames <- sapply(obj.rownames[has_rownames], function(x) paste(x,\n        collapse=", "))\n    obj.rownames.short <- sapply(obj.rownames, function(x) paste(substr(x, 1, 150), "...."))\n    obj.rownames <- ifelse(nchar(obj.rownames) > 154, obj.rownames.short, obj.rownames)\n    obj.rownames <- sapply(obj.rownames, function(x) paste("Row names: ",x))\n    obj.content[has_rownames] <- obj.rownames\n\n\n    obj.colnames <- napply(names, colnames)\n    has_colnames <- obj.colnames != "NULL"\n    obj.colnames <- sapply(obj.colnames[has_colnames], function(x) paste(x,\n        collapse = ", "))\n    obj.colnames.short <- sapply(obj.colnames, function(x) paste(substr(x,\n        1, 150), "...."))\n    obj.colnames <- ifelse(nchar(obj.colnames) > 154, obj.colnames.short,\n        obj.colnames)\n    obj.colnames <- sapply(obj.colnames, function(x) paste("Column names: ",x))\n\n    obj.content[has_colnames] <- obj.colnames\n\n    is_function <- (obj.type == "function")\n    obj.content[is_function] <- napply(names[is_function], function(x) paste(strsplit(repr_text(x),")")[[1]][1],")",sep=""))\n    obj.content <- unlist(obj.content, use.names = FALSE)\n\n\n    out <- data.frame(obj.type, obj.size, obj.dim)\n    names(out) <- c("varType", "varSize", "Rows", "Columns")\n    out$varShape <- paste(out$Rows, " x ", out$Columns)\n    out$varContent <- obj.content\n    out$isMatrix <- FALSE\n    out$varName <- row.names(out)\n    out <- out[, !(names(out) %in% c("Rows", "Columns"))]\n    rownames(out) <- NULL\n    print(out)\n    if (!missing(order.by))\n        out <- out[order(out[[order.by]], decreasing = decreasing),\n            ]\n    if (head)\n        out <- head(out, n)\n    jsonlite::toJSON(out)\n}\n\n.deleteVariable <- function(x) {\n    remove(list=c(x), envir=.GlobalEnv)\n}\n    ',u.scripts={python3:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable",changeSettingsCommand:e=>`_jupyterlab_variableinspector_changesettings(maxitems=${e.maxItems})`},python2:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable",changeSettingsCommand:e=>`_jupyterlab_variableinspector_changesettings(maxitems=${e.maxItems})`},python:{initScript:u.py_script,queryCommand:"_jupyterlab_variableinspector_dict_list()",matrixQueryCommand:"_jupyterlab_variableinspector_getmatrixcontent",widgetQueryCommand:"_jupyterlab_variableinspector_displaywidget",deleteCommand:"_jupyterlab_variableinspector_deletevariable",changeSettingsCommand:e=>`_jupyterlab_variableinspector_changesettings(maxitems=${e.maxItems})`},R:{initScript:u.r_script,queryCommand:".ls.objects()",matrixQueryCommand:".ls.objects",widgetQueryCommand:"TODO",deleteCommand:".deleteVariable"},scala:{initScript:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.init()",queryCommand:"_root_.almond.api.JupyterAPIHolder.value.VariableInspector.dictList()",matrixQueryCommand:"",widgetQueryCommand:"",deleteCommand:""}};class h{constructor(e){this._kernelChanged=new c.Signal(this),this._kernelRestarted=new c.Signal(this),this._session=e.session,this._session.statusChanged.connect(((e,n)=>{switch(n){case"restarting":case"autorestarting":this._kernelRestarted.emit(this._session.ready)}})),this._session.kernelChanged.connect((()=>this._kernelChanged.emit(this._session.ready)))}get kernelChanged(){return this._kernelChanged}get kernelRestarted(){return this._kernelRestarted}get kernelLanguage(){var e;return(null===(e=this._session.session)||void 0===e?void 0:e.kernel)?this._session.session.kernel.info.then((e=>e.language_info.name)):Promise.resolve("")}get kernelName(){return this._session.kernelDisplayName}get ready(){return this._session.ready}get iopubMessage(){return this._session.iopubMessage}fetch(e,n){var t;const r=null===(t=this._session.session)||void 0===t?void 0:t.kernel;if(!r)return Promise.reject(new Error("Require kernel to perform variable inspection!"));const s=r.requestExecute(e);return s.onIOPub=e=>{n(e)},s.done}execute(e){var n;if(!(null===(n=this._session.session)||void 0===n?void 0:n.kernel))throw new Error("No session available.");return this._session.session.kernel.requestExecute(e)}}class b{constructor(){this._source=null,this._panel=null,this._handlers={}}hasHandler(e){return!!this._handlers[e]}getHandler(e){return this._handlers[e]}addHandler(e){this._handlers[e.id]=e}get panel(){return this._panel}set panel(e){this.panel!==e&&(this._panel=e,e&&!e.source&&(e.source=this._source))}get source(){return this._source}set source(e){this._source!==e&&(this._source&&this._source.disposed.disconnect(this._onSourceDisposed,this),this._source=e,this._panel&&!this._panel.isDisposed&&(this._panel.source=this._source),this._source&&this._source.disposed.connect(this._onSourceDisposed,this))}_onSourceDisposed(){this._source=null}}var y=t(762),f=t(256),g=t(295),x=t(445),v=t.n(x);(0,g.provideJupyterDesignSystem)().register((0,g.jpDataGrid)(),(0,g.jpDataGridRow)(),(0,g.jpDataGridCell)(),(0,g.jpTextField)(),(0,g.jpOption)(),(0,g.jpSelect)(),(0,g.jpButton)());const j="jp-VarInspector-table-row",C="jp-VarInspector-table-row-hidden",w="jp-VarInspector-type",S="jp-VarInspector-varName",k="filter-type",N="filter-input",T="filter-button",I="filter-list",D="filtered-variable-button";class L extends f.Widget{constructor(){super(),this._source=null,this.addClass("jp-VarInspector"),this._title=E.createTitle(),this._title.className="jp-VarInspector-title",this._table=E.createTable(),this._table.className="jp-VarInspector-table",this._filteredTable=E.createFilterTable(),this.node.appendChild(this._title),this.node.appendChild(this._filteredTable),this.node.appendChild(this._table),this._filtered={type:[],name:[]},this.intializeFilteredTable()}intializeFilteredTable(){const e=this._filteredTable.querySelector("."+k),n=this._filteredTable.querySelector("."+N);this._filteredTable.querySelector("."+T).addEventListener("click",(()=>{this.onFilterChange(e.value,n.value,!0)}))}stringInFilter(e,n){for(let t=0;t<this._filtered[n].length;t++)if(v()(this._filtered[n][t])(e))return!0;return!1}onFilterChange(e,n,t){if(""!==n)if(t){if(this._filtered[e].includes(n))return;this._filtered[e].push(n);const t=this._filteredTable.querySelector("."+I),r=E.createFilteredButton(n,e);r.addEventListener("click",(()=>{const n=r.querySelector(".filtered-variable-button-text");this.onFilterChange(e,n.innerHTML,!1),this.addFilteredOutRows(),r.remove()})),t.appendChild(r),this.filterOutTable()}else this._filtered[e]=this._filtered[e].filter((e=>e!==n))}addFilteredOutRows(){const e=this._table.querySelectorAll("."+C);for(let n=0;n<e.length;n++){const t=e[n].querySelector("."+S),r=e[n].querySelector("."+w);this.stringInFilter(t.innerHTML,"name")||this._filtered.type.includes(r.innerHTML)||(e[n].className=j)}}filterOutTable(){const e=this._table.querySelectorAll("."+j);for(let n=0;n<e.length;n++){const t=e[n].querySelector("."+S),r=e[n].querySelector("."+w);(this.stringInFilter(t.innerHTML,"name")||this._filtered.type.includes(r.innerHTML))&&(e[n].className=C)}}removeRow(e){const n=this._table.querySelectorAll("."+j);for(let t=0;t<n.length;t++)if(n[t].querySelector("."+S).innerHTML===e)return void n[t].remove()}get source(){return this._source}set source(e){this._source!==e&&(this._source&&(this._source.enabled=!1,this._source.inspected.disconnect(this.onInspectorUpdate,this),this._source.disposed.disconnect(this.onSourceDisposed,this)),this._source=e,this._source&&(this._source.enabled=!0,this._source.inspected.connect(this.onInspectorUpdate,this),this._source.disposed.connect(this.onSourceDisposed,this),this._source.performInspection()))}dispose(){this.isDisposed||(this.source&&(this.source.enabled=!1),this.source=null,super.dispose())}onCloseRequest(e){super.onCloseRequest(e),this._source&&(this._source.enabled=!1)}onAfterShow(e){super.onAfterShow(e),this._source&&(this._source.enabled=!0,this._source.performInspection())}onInspectorUpdate(e,n){var t;if(!this.isAttached)return;const r=n.title,s=n.payload;r.contextName?this._title.innerHTML=r.contextName:this._title.innerHTML="    Inspecting '"+r.kernelName+"' "+r.contextName,this._table.innerHTML="";const a=document.createElement("jp-data-grid-row");a.className="sticky-header";const i=[" "," ","NAME","TYPE","SIZE","SHAPE","CONTENT"];for(let e=0;e<i.length;e++){const n=document.createElement("jp-data-grid-cell");n.className="column-header",n.textContent=i[e],n.gridColumn=(e+1).toString(),a.appendChild(n)}this._table.appendChild(a);for(let e=0;e<s.length;e++){const n=s[e],r=n.varName,a=n.varType,i=document.createElement("jp-data-grid-row");i.className=j,(this._filtered.type.includes(a)||this.stringInFilter(r,"name"))&&(i.className=C);let o=document.createElement("jp-data-grid-cell");o.title="Delete Variable",o.className="jp-VarInspector-deleteButton",o.gridColumn="1";const c=document.createElement("jp-button");c.appearance="stealth";const p=l.closeIcon.element();if(p.className="icon-button",p.onclick=e=>{this.removeRow(r)},c.append(p),o.append(c),i.appendChild(o),o=document.createElement("jp-data-grid-cell"),n.isMatrix){o.title="View Contents",o.className="jp-VarInspector-inspectButton";const e=document.createElement("jp-button");e.appearance="stealth";const t=l.searchIcon.element();t.className="icon-button",t.onclick=e=>{var t;null===(t=this._source)||void 0===t||t.performMatrixInspection(n.varName).then((e=>{this._showMatrix(e,n.varName,n.varType)}))},e.append(t),o.append(e)}else o.innerHTML="";o.gridColumn="2",i.appendChild(o),o=document.createElement("jp-data-grid-cell"),o.className=S,o.innerHTML=r,o.gridColumn="3",i.appendChild(o),o=document.createElement("jp-data-grid-cell"),o.innerHTML=a,o.className=w,o.gridColumn="4",i.appendChild(o),o=document.createElement("jp-data-grid-cell"),o.innerHTML=n.varSize,o.gridColumn="5",i.appendChild(o),o=document.createElement("jp-data-grid-cell"),o.innerHTML=n.varShape,o.gridColumn="6",i.appendChild(o),o=document.createElement("jp-data-grid-cell");const d=null===(t=this._source)||void 0===t?void 0:t.rendermime;if(n.isWidget&&d){const e=new y.OutputAreaModel({trusted:!0}),t=new y.SimplifiedOutputArea({model:e,rendermime:d});t.future=this._source.performWidgetInspection(n.varName),f.Widget.attach(t,o)}else o.innerHTML=E.escapeHtml(n.varContent).replace(/\\n/g,"</br>");o.gridColumn="7",i.appendChild(o),this._table.appendChild(i)}}onSourceDisposed(e,n){this.source=null}_showMatrix(e,n,t){const r=new p.DataGrid({defaultSizes:{rowHeight:32,columnWidth:128,rowHeaderWidth:64,columnHeaderHeight:32}});r.dataModel=e,r.title.label=t+": "+n,r.title.closable=!0,this.parent.layout.addWidget(r,{mode:"split-right"})}}var E;!function(e){const n=new Map(Object.entries({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"}));e.escapeHtml=function(e){return String(e).replace(/[&<>"'/]/g,(e=>n.get(e)))},e.createTable=function(){const e=document.createElement("jp-data-grid");return e.generateHeader="sticky",e.gridTemplateColumns="1fr 1fr 6fr 4fr 4fr 5fr 16fr",e},e.createTitle=function(e=""){const n=document.createElement("p");return n.innerHTML=e,n},e.createFilterTable=function(){const e=document.createElement("div");e.className="filter-container";const n=document.createElement("jp-select");n.className=k,n.selectedIndex=0;const t=document.createElement("jp-option");t.value="type",t.innerHTML="Type";const r=document.createElement("jp-option");r.value="name",r.innerHTML="Name",n.appendChild(t),n.appendChild(r);const s=document.createElement("div");s.className="filter-search-container";const a=document.createElement("jp-text-field");a.setAttribute("type","text"),a.setAttribute("placeholder","Filter out variable"),a.className=N;const i=document.createElement("jp-button");i.textContent="Filter",i.className=T,i.appearance="accent";const o=document.createElement("ul");return o.className=I,s.appendChild(n),s.appendChild(a),s.appendChild(i),e.appendChild(s),e.appendChild(o),e},e.createFilteredButton=function(e,n){const t=document.createElement("jp-button");t.value=n,t.title=n,t.className=D;const r=document.createElement("div");r.className="filter-button-content";const s=document.createElement("div");return s.className="filtered-variable-button-text",s.innerHTML=e,l.closeIcon.element({container:r}),r.insertAdjacentElement("afterbegin",s),t.appendChild(r),t.className=D,t}}(E||(E={}));var F=t(262);const M=new F.Token("jupyterlab_extension/variableinspector:IVariableInspectorManager");var q;new F.Token("jupyterlab_extension/variableinspector:IVariableInspector"),(0,g.addJupyterLabThemeChangeListener)(),function(e){e.open="variableinspector:open"}(q||(q={}));const H="@lckr/jupyterlab_variableinspector:jupyterlab-variableInspector-settings",Q=[{id:"@lckr/jupyterlab_variableinspector",requires:[r.ICommandPalette,s.ILayoutRestorer,s.ILabShell],provides:M,autoStart:!0,activate:(e,n,t,s)=>{const a=new b,i=q.open,o=new r.WidgetTracker({namespace:"variableinspector"});return t.restore(o,{command:i,args:()=>({}),name:()=>"variableinspector"}),e.commands.addCommand(i,{label:"Open Variable Inspector",execute:()=>{a.panel&&!a.panel.isDisposed||(a.panel=function(){const e=new L;return e.id="jp-variableinspector",e.title.label="Variable Inspector",e.title.icon=l.listIcon,e.title.closable=!0,e.disposed.connect((()=>{a.panel===e&&(a.panel=null)})),o.add(e),e}()),a.panel.isAttached||s.add(a.panel,"main"),a.source&&a.source.performInspection(),s.activateById(a.panel.id)}}),n.addItem({command:i,category:"Variable Inspector"}),console.log("JupyterLab extension @lckr/jupyterlab_variableinspector is activated!"),a}},{id:"@lckr/jupyterlab-variableinspector:consoles",requires:[M,a.IConsoleTracker,s.ILabShell,o.ISettingRegistry],autoStart:!0,activate:async(e,n,t,r,s)=>{const a={},i=await s.load(H);t.widgetAdded.connect(((e,t)=>{n.hasHandler(t.sessionContext.path)?a[t.id]=new Promise(((e,r)=>{e(n.getHandler(t.sessionContext.path))})):a[t.id]=new Promise(((e,r)=>{const s=t.sessionContext,o=new h({session:s}),l=o.ready.then((()=>o.kernelLanguage.then((e=>u.getScript(e)))));l.then((r=>{const l=r.initScript,c=r.queryCommand,p=r.matrixQueryCommand,d=r.widgetQueryCommand,m=r.deleteCommand,u=r.changeSettingsCommand,h={queryCommand:c,matrixQueryCommand:p,widgetQueryCommand:d,deleteCommand:m,connector:o,initScript:l,changeSettingsCommand:u,id:s.path,setting:i},b=new _(h);n.addHandler(b),t.disposed.connect((()=>{delete a[t.id],b.dispose()})),b.ready.then((()=>{e(b)}))})),l.catch((n=>{console.log(n);const r=new m(o);t.disposed.connect((()=>{delete a[t.id],r.dispose()})),e(r)}))})),o(r)}));const o=(e,r)=>{var s;const i=null!==(s=null==r?void 0:r.newValue)&&void 0!==s?s:e.currentWidget;i&&t.has(i)&&a[i.id].then((e=>{e&&(n.source=e,n.source.performInspection())}))};o(r),r.currentChanged.connect(o),e.contextMenu.addItem({command:q.open,selector:".jp-CodeConsole"})}},{id:"@lckr/jupyterlab-variableinspector:notebooks",requires:[M,i.INotebookTracker,s.ILabShell,o.ISettingRegistry],autoStart:!0,activate:async(e,n,t,r,s)=>{const a={},i=await s.load(H);t.widgetAdded.connect(((e,t)=>{a[t.id]=new Promise(((e,r)=>{const s=t.sessionContext,o=new h({session:s}),l=t.content.rendermime,c=o.ready.then((async()=>{const e=await o.kernelLanguage;return u.getScript(e)}));c.then((r=>{const c=r.initScript,p=r.queryCommand,d=r.matrixQueryCommand,m=r.widgetQueryCommand,u=r.deleteCommand,h=r.changeSettingsCommand,b={queryCommand:p,matrixQueryCommand:d,widgetQueryCommand:m,deleteCommand:u,connector:o,rendermime:l,initScript:c,changeSettingsCommand:h,id:s.path,setting:i},y=new _(b);n.addHandler(y),t.disposed.connect((()=>{delete a[t.id],y.dispose()})),y.ready.then((()=>{e(y)}))})),c.catch((e=>{r(e)}))})),o(r)}));const o=(e,r)=>{var s;const i=null!==(s=null==r?void 0:r.newValue)&&void 0!==s?s:e.currentWidget;if(!i||!t.has(i)||i.isDisposed)return;const o=a[i.id];null==o||o.then((e=>{e&&(n.source=e,n.source.performInspection())}))};o(r),r.currentChanged.connect(o),e.contextMenu.addItem({command:q.open,selector:".jp-Notebook"})}}]}}]);