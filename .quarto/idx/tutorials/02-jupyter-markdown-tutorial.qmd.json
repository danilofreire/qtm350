{"title":"Jupyter Notebook and Markdown Tutorial","markdown":{"yaml":{"title":"Jupyter Notebook and Markdown Tutorial","lang":"en-GB","jupyter":"python3","highlight-style":"arrow","format":{"html":{"toc":true,"toc-depth":2,"number-sections":false}},"editor":{"render-on-save":true}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThis tutorial will introduce you to [Jupyter Notebook](https://jupyter.org/documentation) and [Markdown](https://www.markdownguide.org/). Jupyter Notebook is an interactive computing platform that allows users to create and share documents that contain live code, equations, visualisations, and narrative text. Markdown is a lightweight markup language that is used to format text, and can be used for everything - websites, documents, notes, books, presentations, email messages, and technical documentation. Even WhatsApp and Facebook Messenger use Markdown to format messages. So if you have already italicised a word or made a text bold on WhatsApp, you have used Markdown! \n\nThis tutorial is divided into two parts. The first part will introduce you to Jupyter Notebook and show you how to create a new notebook, run code cells, and format text cells using Markdown. The second part will provide a more in-depth look at Markdown and show you how to create headings, lists, links, images, and tables.\n\n# Introduction to Jupyter Notebook\n\n## What is Jupyter Notebook?\n\n[Jupyter Notebook](https://jupyter.org/documentation) is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Jupyter Notebook supports over 40 programming languages, including [Python](https://python.org), [R](https://www.r-project.org/), and [Julia](https://julialang.org/). Jupyter Notebook is widely used in data science, machine learning, scientific computing, and other fields.\n\nJupyter Notebooks provide an interactive development environment that allows you to write and execute code, see the results immediately, and create reproducible analyses. Jupyter Notebooks are organized into cells, which can contain code, text, equations, or visualisations. You can run individual cells or the entire notebook, and you can save your work as a notebook file (`.ipynb`) that can be shared with others. \n\n## Creating a New Notebook\n\nFirst, please make sure you have Python, Jupyter Notebook, and VSCode installed\non your computer. If you do not have these installed, please refer to the\n[VSCode and Anaconda Tutorial](https://github.com/danilofreire/qtm350/blob/main/tutorials/01-vscode-anaconda-tutorial.pdf) for instructions on how to install them.\n\nTo create a new Jupyter Notebook in VSCode, please go to the tab \"File\" > \"New File\". You will see a prompt in the middle of the screen. Select the option \"Jupyter Notebook\". \n\n![Creating a new Jupyter Notebook in VSCode.](images/new-jupyter-notebook.png)\n\nA new Jupyter Notebook will be created with the file extension `.ipynb`. You can rename the notebook by clicking on the notebook name at the top of the screen. An empty notebook will look like this:\n\n![An empty Jupyter Notebook.](images/empty-jupyter-notebook.png)\n\nPlease do not forget to select the Python interpreter that you want to use for the notebook. You can do this by clicking on the Python version at the top right corner of the screen. A prompt will appear, and you can select the Python interpreter that you want to use (in this case, Anacoda's \"base\").\n\n![Selecting the Python interpreter for the notebook.](images/select-kernel.png)\n\nTo create a chunk of Python code click on \"+ Code.\" You will get an empty gray box which has Python on the lower-right corner. You can type Python code in this box and run it by clicking on the \"Run\" button on the left side of the box. You can also run the code by pressing \"Shift + Enter\" on your keyboard.\n\n![A code cell in a Jupyter Notebook.](images/code-cell.png)\n\nHere you should enter the Python commands. For example, type the following lines of code in the code cell:\n\n```{python}\n#| output: false\n#| eval: false\nprint(\"Welcome to QTM 350!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n```\n\nThe results of the code will be displayed below the code cell. In this case, the output will be:\n\n![Output of the code cell.](images/code-output.png)\n\nTo create a text cell click on \"+ Markdown.\" You will get an empty white box where you can type text. We will cover Markdown in more detail in the next section. But for now, you can type the following text in the Markdown cell:\n\n```{markdown}\n# Welcome to QTM 350!\n\nThis is a Jupyter Notebook. You can write *text*, **equations**, and `code` \nin [this notebook](https://github.com/danilofreire/qtm350/blob/main/tutorials/testing-ipython.ipynb). \n```\n\nThe text will be displayed in the text cell like this:\n\n![A text cell in a Jupyter Notebook.](images/text-cell.png)\n\nYou can run the text cell by clicking the \"Run\" button on the left side of the box or by pressing \"Shift + Enter\" on your keyboard. The first text block shows how the text looks before running the cell, and the second block shows how it looks after running the cell. Just double click on the space where the text is to edit the Markdown block. This is should open the gray box again.\n\n# Introduction to Markdown\n\n## Why Use Markdown?\n\nMarkdown is a great way to format text because it is simple, easy to learn, and widely supported. You can use Markdown to create headings, lists, tables, equations, and figures in your documents. Markdown is used in many different applications, including Jupyter Notebook, GitHub, and Slack. Learning Markdown will help you create well-formatted documents that are easy to read and share.\n\n## Headings\n\nYou can create headings using the `#` symbol. For example, `# Heading 1` creates a first-level heading, `## Heading 2` creates a second-level heading, and so on. You can create up to six levels of headings using the `#` symbol.\n\n```{markdown}\n# Heading 1\n## Heading 2\n### Heading 3\n```\n\n## Lists\n\nTo create an ordered list with nested unordered sub-items in Markdown, you can write the following code:\n\n```{markdown}\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n  - This is a sub-item in the unordered list.\n    - This is a sub-sub-item in the unordered list.\n```\n\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n    - This is a sub-item in the unordered list.\n        - This is a sub-sub-item in the unordered list.\n\nYou can also create unordered lists:\n\n```{markdown}\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n```\n\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n\n## Tables\n\nYou can create tables using the `|` symbol. For example:\n\n```{markdown}\nTable: Your Caption \n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n```\n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n\nTable: Your Caption \n\nThe `:` symbols in the second row of the table determine the alignment of the text in each column. You can use `left`, `center`, or `right` to align the text.\n\n## Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks\n\nWhen working with pandas DataFrames, you can convert them into Markdown tables for better presentation. The method is also relatively simple. Here is how to do it:\n\n### Prerequisites\n\nEnsure you have the following installed:\n\n1. Jupyter Notebook\n2. `pandas`\n3. `tabulate` (for enhanced table formatting)\n\nJupyter Notebook and `pandas` are included in the Anaconda distribution. You can install `tabulate` using `conda install` in your terminal. If you are using VS Code, you can open a terminal by clicking on \"Terminal\" > \"New Terminal\" in the top menu. Then run the following command:\n\n```{markdown}\nconda install tabulate\n```\n\n### Basic Method: Using `pandas.DataFrame.to_markdown()`\n\n`pandas` provides a built-in method `to_markdown()` for converting DataFrames to Markdown tables.\n\n#### Step 1: Import pandas and create a DataFrame \n\nYou can create a dataframe by passing a dictionary to the `pd.DataFrame()` constructor:\n\n```{python}\n#| output: false\n#| eval: false\n# If necessary, install pandas and tabulate \n# You should have pandas installed if you installed Anaconda, \n# but if you do not, you can install both with the following terminal command:\n# conda install pandas tabulate\n\n# Import pandas\nimport pandas as pd\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"London\", \"Paris\"]\n}\ndf = pd.DataFrame(data)\n```\n\n#### Step 2: Convert DataFrame to Markdown\n\nThen you just need to call the `to_markdown()` method on the DataFrame:\n\n```{python}\n#| output: false\n#| eval: false \n\n# Print the DataFrame as a Markdown table, excluding the index\nmarkdown_table = df.to_markdown(index=False)\nprint(markdown_table)\n```\n\n\nThis will output:\n\n```{markdown}\n| Name    | Age  | City     |\n|:--------|-----:|:---------|\n| Alice   |   25 | New York |\n| Bob     |   30 | London   |\n| Charlie |   35 | Paris    |\n```\n\n#### Step 3: Display in Jupyter Notebook\n\nTo display the Markdown table in a Jupyter Notebook cell, use the `display()` function from the `IPython.display` module:\n\n```{python}\n#| output: false\n#| eval: false \n\n# You should also have the IPython package installed if you installed Anaconda\n# If not, you can install it with\n# conda install ipython\n\n# Import the Markdown display class. \n# This is what allows us to display Markdown in Jupyter Notebooks \nfrom IPython.display import display, Markdown\n\n# Display the Markdown table\ndisplay(Markdown(markdown_table))\n```\n\nThis will render a nicely formatted table in your notebook:\n\n![Markdown table in a Jupyter Notebook.](images/markdown-table.png)\n\n### Advanced Formatting\n\nYou can customise the Markdown table using various parameters of `to_markdown()`:\n\n```{python}\n#| output: false\n#| eval: false\n# Customising the Markdown table using the to_markdown() method\nmarkdown_table = df.to_markdown(\n    index=False,  # Don't include index\n    tablefmt=\"pipe\",  # Use pipe format\n    floatfmt=\".2f\",  # Format floats to 2 decimal places\n    headers=[\"Name\", \"Age (Years)\", \"City\"],  # Custom headers\n    colalign=(\"left\", \"center\", \"right\")  # Align columns\n)\ndisplay(Markdown(markdown_table))\n```\n\n### Using tabulate for Enhanced Formatting\n\nThe `tabulate` library offers even more formatting options. While they are not necessary for basic tables, they can be useful for more complex tables. In our course, you will probably not need them, but I will show you how to use them for your reference. Please check their [documentation](https://pypi.org/project/tabulate/) for more information.\n\n```{python}\n#| output: false\n#| eval: false \nfrom tabulate import tabulate\n\nmarkdown_table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)\ndisplay(Markdown(markdown_table))\n```\n\n### Best Practices\n\n1. **Index**: Consider whether you need the index in your table. Often, it is cleaner to exclude it using `index=False`.\n\n2. **Formatting**: Use `floatfmt` to control decimal places for numerical data.\n\n3. **Headers**: Customize headers for clarity, especially if your DataFrame column names are not user-friendly.\n\n4. **Table Format**: Experiment with different `tablefmt` options to find the most suitable for your needs.\n\n5. **Large DataFrames**: For large DataFrames, consider displaying only a subset of rows or columns to maintain readability.\n\n### Example: Comprehensive Table Creation\n\nHere is a more comprehensive example incorporating various best practices:\n\n```{python}\n#| output: false\n#| eval: false \n# Import necessary packages\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Product\": [\"Laptop\", \"Smartphone\", \"Tablet\"],\n    \"Price\": [999.99, 599.50, 299.75],\n    \"Stock\": [50, 100, 75],\n    \"Rating\": [4.5, 4.8, 4.2]\n}\ndf = pd.DataFrame(data)\n\n# Create a formatted Markdown table\nmarkdown_table = tabulate(\n    df,\n    headers=[\"Product Name\", \"Price ($)\", \"Stock Quantity\", \"Customer Rating\"],\n    tablefmt=\"pipe\", # Format as Markdown table\n    floatfmt=(\".2f\", \".2f\", \"d\", \".1f\"),\n    showindex=False, # Don't show the index (row numbers)\n    numalign=\"right\", # Align numbers to the right\n    stralign=\"left\" # Align strings (text, first column) to the left\n)\n\n# Display the table in the notebook\ndisplay(Markdown(\"### Product Inventory Summary\"))\ndisplay(Markdown(markdown_table))\n```\n\nThis will produce a well-formatted table with custom headers, appropriate number formatting, and a title.\n\n![Comprehensive Markdown table in a Jupyter Notebook.](images/comprehensive-table.png)\n\n## Equations\n\nYou can create equations using the `$$` symbol. For example in @eq-stddev, we have the formula for the standard deviation of a population:\n\n```{markdown}\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev}\n```\n\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev} \n\nYou can also create equations inline by using the `$` symbol. For example, `$\\alpha = \\beta + \\gamma$` will render as $\\alpha = \\beta + \\gamma$. To learn more about how to write equations in \\LaTeX \\hspace{.001cm} using Markdown, you can refer to the [Overleaf documentation](https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols).\n\n## Figures\n\nYou can include figures in your document using the `![Caption](path/to/image.png){#fig-label}` syntax. For example:\n\n```{markdown}\n![This is a figure caption.](path/to/image.png){#fig-label}\n```\n\nThis will include the image `path/to/image.png` in your document with the caption \"This is a figure caption.\" You can refer to the figure using the label `fig-label`, but this is optional.\n\nIf you are creating plots on Jupyter Notebook, the graphs will appear after the code cell that generates them.\n\n## Citations\n\nAlthough Markdown has excellent reference support with [BibTeX files](https://en.wikipedia.org/wiki/BibTeX), there is no reliable way to include citations automatically in Jupyter Notebooks. The two packages I know that manage citations, [cite2c](https://github.com/takluyver/cite2c) and [Jupyterlab Citation Manager](https://github.com/krassowski/jupyterlab-citation-manager), are not ideal. The first has not been maintained for years, while the second is not ready for most uses. Therefore, I suggest simply copying the citation from Google Scholar and pasting it into a Markdown cell titled \"References\" at the end of your document. The same approach applies for inline citations.\n\n## Footnotes\n\nJupyter and Markdown support inline footnotes[^inline]. To create a footnote, simply add a caret and brackets with a label inside, like this: `[^label]`. Then, you can define the footnote content anywhere in the document using the same label followed by a colon[^content]. I usually include them at the end of a paragraph. Jupyter will automatically number and format your footnotes for you.\n\n[^inline]: This is an inline footnote.\n[^content]: You can also include multiple paragraphs in a footnote by indenting the subsequent paragraphs.\n\n# Conclusion\n\nI hope you find this tutorial helpful and that you can use Jupyter Notebook and Markdown to create beautiful documents. If you have any questions or feedback, please feel free to reach out to me. Happy coding! :)\n","srcMarkdownNoYaml":"\n\n# Introduction\n\nThis tutorial will introduce you to [Jupyter Notebook](https://jupyter.org/documentation) and [Markdown](https://www.markdownguide.org/). Jupyter Notebook is an interactive computing platform that allows users to create and share documents that contain live code, equations, visualisations, and narrative text. Markdown is a lightweight markup language that is used to format text, and can be used for everything - websites, documents, notes, books, presentations, email messages, and technical documentation. Even WhatsApp and Facebook Messenger use Markdown to format messages. So if you have already italicised a word or made a text bold on WhatsApp, you have used Markdown! \n\nThis tutorial is divided into two parts. The first part will introduce you to Jupyter Notebook and show you how to create a new notebook, run code cells, and format text cells using Markdown. The second part will provide a more in-depth look at Markdown and show you how to create headings, lists, links, images, and tables.\n\n# Introduction to Jupyter Notebook\n\n## What is Jupyter Notebook?\n\n[Jupyter Notebook](https://jupyter.org/documentation) is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. Jupyter Notebook supports over 40 programming languages, including [Python](https://python.org), [R](https://www.r-project.org/), and [Julia](https://julialang.org/). Jupyter Notebook is widely used in data science, machine learning, scientific computing, and other fields.\n\nJupyter Notebooks provide an interactive development environment that allows you to write and execute code, see the results immediately, and create reproducible analyses. Jupyter Notebooks are organized into cells, which can contain code, text, equations, or visualisations. You can run individual cells or the entire notebook, and you can save your work as a notebook file (`.ipynb`) that can be shared with others. \n\n## Creating a New Notebook\n\nFirst, please make sure you have Python, Jupyter Notebook, and VSCode installed\non your computer. If you do not have these installed, please refer to the\n[VSCode and Anaconda Tutorial](https://github.com/danilofreire/qtm350/blob/main/tutorials/01-vscode-anaconda-tutorial.pdf) for instructions on how to install them.\n\nTo create a new Jupyter Notebook in VSCode, please go to the tab \"File\" > \"New File\". You will see a prompt in the middle of the screen. Select the option \"Jupyter Notebook\". \n\n![Creating a new Jupyter Notebook in VSCode.](images/new-jupyter-notebook.png)\n\nA new Jupyter Notebook will be created with the file extension `.ipynb`. You can rename the notebook by clicking on the notebook name at the top of the screen. An empty notebook will look like this:\n\n![An empty Jupyter Notebook.](images/empty-jupyter-notebook.png)\n\nPlease do not forget to select the Python interpreter that you want to use for the notebook. You can do this by clicking on the Python version at the top right corner of the screen. A prompt will appear, and you can select the Python interpreter that you want to use (in this case, Anacoda's \"base\").\n\n![Selecting the Python interpreter for the notebook.](images/select-kernel.png)\n\nTo create a chunk of Python code click on \"+ Code.\" You will get an empty gray box which has Python on the lower-right corner. You can type Python code in this box and run it by clicking on the \"Run\" button on the left side of the box. You can also run the code by pressing \"Shift + Enter\" on your keyboard.\n\n![A code cell in a Jupyter Notebook.](images/code-cell.png)\n\nHere you should enter the Python commands. For example, type the following lines of code in the code cell:\n\n```{python}\n#| output: false\n#| eval: false\nprint(\"Welcome to QTM 350!\")\n\nx = 5\ny = 10\nz = x + y\nprint(z)\n```\n\nThe results of the code will be displayed below the code cell. In this case, the output will be:\n\n![Output of the code cell.](images/code-output.png)\n\nTo create a text cell click on \"+ Markdown.\" You will get an empty white box where you can type text. We will cover Markdown in more detail in the next section. But for now, you can type the following text in the Markdown cell:\n\n```{markdown}\n# Welcome to QTM 350!\n\nThis is a Jupyter Notebook. You can write *text*, **equations**, and `code` \nin [this notebook](https://github.com/danilofreire/qtm350/blob/main/tutorials/testing-ipython.ipynb). \n```\n\nThe text will be displayed in the text cell like this:\n\n![A text cell in a Jupyter Notebook.](images/text-cell.png)\n\nYou can run the text cell by clicking the \"Run\" button on the left side of the box or by pressing \"Shift + Enter\" on your keyboard. The first text block shows how the text looks before running the cell, and the second block shows how it looks after running the cell. Just double click on the space where the text is to edit the Markdown block. This is should open the gray box again.\n\n# Introduction to Markdown\n\n## Why Use Markdown?\n\nMarkdown is a great way to format text because it is simple, easy to learn, and widely supported. You can use Markdown to create headings, lists, tables, equations, and figures in your documents. Markdown is used in many different applications, including Jupyter Notebook, GitHub, and Slack. Learning Markdown will help you create well-formatted documents that are easy to read and share.\n\n## Headings\n\nYou can create headings using the `#` symbol. For example, `# Heading 1` creates a first-level heading, `## Heading 2` creates a second-level heading, and so on. You can create up to six levels of headings using the `#` symbol.\n\n```{markdown}\n# Heading 1\n## Heading 2\n### Heading 3\n```\n\n## Lists\n\nTo create an ordered list with nested unordered sub-items in Markdown, you can write the following code:\n\n```{markdown}\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n  - This is a sub-item in the unordered list.\n    - This is a sub-sub-item in the unordered list.\n```\n\n1. This is an ordered list.\n2. This is the second item in the ordered list.\n    - This is a sub-item in the unordered list.\n        - This is a sub-sub-item in the unordered list.\n\nYou can also create unordered lists:\n\n```{markdown}\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n```\n\n- This is an unordered list.\n- This is the second item in the unordered list.\n  - This is a sub-item in the unordered list.\n\n## Tables\n\nYou can create tables using the `|` symbol. For example:\n\n```{markdown}\nTable: Your Caption \n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n```\n\n| A            | New              | Table          |\n|:-------------|:----------------:|---------------:|\n|left-aligned  |centre-aligned    |right-aligned   |\n|*italics*     |~~strikethrough~~ |**boldface**    |\n\nTable: Your Caption \n\nThe `:` symbols in the second row of the table determine the alignment of the text in each column. You can use `left`, `center`, or `right` to align the text.\n\n## Creating Markdown Tables from Pandas DataFrames in Jupyter Notebooks\n\nWhen working with pandas DataFrames, you can convert them into Markdown tables for better presentation. The method is also relatively simple. Here is how to do it:\n\n### Prerequisites\n\nEnsure you have the following installed:\n\n1. Jupyter Notebook\n2. `pandas`\n3. `tabulate` (for enhanced table formatting)\n\nJupyter Notebook and `pandas` are included in the Anaconda distribution. You can install `tabulate` using `conda install` in your terminal. If you are using VS Code, you can open a terminal by clicking on \"Terminal\" > \"New Terminal\" in the top menu. Then run the following command:\n\n```{markdown}\nconda install tabulate\n```\n\n### Basic Method: Using `pandas.DataFrame.to_markdown()`\n\n`pandas` provides a built-in method `to_markdown()` for converting DataFrames to Markdown tables.\n\n#### Step 1: Import pandas and create a DataFrame \n\nYou can create a dataframe by passing a dictionary to the `pd.DataFrame()` constructor:\n\n```{python}\n#| output: false\n#| eval: false\n# If necessary, install pandas and tabulate \n# You should have pandas installed if you installed Anaconda, \n# but if you do not, you can install both with the following terminal command:\n# conda install pandas tabulate\n\n# Import pandas\nimport pandas as pd\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"London\", \"Paris\"]\n}\ndf = pd.DataFrame(data)\n```\n\n#### Step 2: Convert DataFrame to Markdown\n\nThen you just need to call the `to_markdown()` method on the DataFrame:\n\n```{python}\n#| output: false\n#| eval: false \n\n# Print the DataFrame as a Markdown table, excluding the index\nmarkdown_table = df.to_markdown(index=False)\nprint(markdown_table)\n```\n\n\nThis will output:\n\n```{markdown}\n| Name    | Age  | City     |\n|:--------|-----:|:---------|\n| Alice   |   25 | New York |\n| Bob     |   30 | London   |\n| Charlie |   35 | Paris    |\n```\n\n#### Step 3: Display in Jupyter Notebook\n\nTo display the Markdown table in a Jupyter Notebook cell, use the `display()` function from the `IPython.display` module:\n\n```{python}\n#| output: false\n#| eval: false \n\n# You should also have the IPython package installed if you installed Anaconda\n# If not, you can install it with\n# conda install ipython\n\n# Import the Markdown display class. \n# This is what allows us to display Markdown in Jupyter Notebooks \nfrom IPython.display import display, Markdown\n\n# Display the Markdown table\ndisplay(Markdown(markdown_table))\n```\n\nThis will render a nicely formatted table in your notebook:\n\n![Markdown table in a Jupyter Notebook.](images/markdown-table.png)\n\n### Advanced Formatting\n\nYou can customise the Markdown table using various parameters of `to_markdown()`:\n\n```{python}\n#| output: false\n#| eval: false\n# Customising the Markdown table using the to_markdown() method\nmarkdown_table = df.to_markdown(\n    index=False,  # Don't include index\n    tablefmt=\"pipe\",  # Use pipe format\n    floatfmt=\".2f\",  # Format floats to 2 decimal places\n    headers=[\"Name\", \"Age (Years)\", \"City\"],  # Custom headers\n    colalign=(\"left\", \"center\", \"right\")  # Align columns\n)\ndisplay(Markdown(markdown_table))\n```\n\n### Using tabulate for Enhanced Formatting\n\nThe `tabulate` library offers even more formatting options. While they are not necessary for basic tables, they can be useful for more complex tables. In our course, you will probably not need them, but I will show you how to use them for your reference. Please check their [documentation](https://pypi.org/project/tabulate/) for more information.\n\n```{python}\n#| output: false\n#| eval: false \nfrom tabulate import tabulate\n\nmarkdown_table = tabulate(df, headers='keys', tablefmt='pipe', showindex=False)\ndisplay(Markdown(markdown_table))\n```\n\n### Best Practices\n\n1. **Index**: Consider whether you need the index in your table. Often, it is cleaner to exclude it using `index=False`.\n\n2. **Formatting**: Use `floatfmt` to control decimal places for numerical data.\n\n3. **Headers**: Customize headers for clarity, especially if your DataFrame column names are not user-friendly.\n\n4. **Table Format**: Experiment with different `tablefmt` options to find the most suitable for your needs.\n\n5. **Large DataFrames**: For large DataFrames, consider displaying only a subset of rows or columns to maintain readability.\n\n### Example: Comprehensive Table Creation\n\nHere is a more comprehensive example incorporating various best practices:\n\n```{python}\n#| output: false\n#| eval: false \n# Import necessary packages\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom tabulate import tabulate\n\n# Create a sample DataFrame\ndata = {\n    \"Product\": [\"Laptop\", \"Smartphone\", \"Tablet\"],\n    \"Price\": [999.99, 599.50, 299.75],\n    \"Stock\": [50, 100, 75],\n    \"Rating\": [4.5, 4.8, 4.2]\n}\ndf = pd.DataFrame(data)\n\n# Create a formatted Markdown table\nmarkdown_table = tabulate(\n    df,\n    headers=[\"Product Name\", \"Price ($)\", \"Stock Quantity\", \"Customer Rating\"],\n    tablefmt=\"pipe\", # Format as Markdown table\n    floatfmt=(\".2f\", \".2f\", \"d\", \".1f\"),\n    showindex=False, # Don't show the index (row numbers)\n    numalign=\"right\", # Align numbers to the right\n    stralign=\"left\" # Align strings (text, first column) to the left\n)\n\n# Display the table in the notebook\ndisplay(Markdown(\"### Product Inventory Summary\"))\ndisplay(Markdown(markdown_table))\n```\n\nThis will produce a well-formatted table with custom headers, appropriate number formatting, and a title.\n\n![Comprehensive Markdown table in a Jupyter Notebook.](images/comprehensive-table.png)\n\n## Equations\n\nYou can create equations using the `$$` symbol. For example in @eq-stddev, we have the formula for the standard deviation of a population:\n\n```{markdown}\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev}\n```\n\n$$\n\\sigma = \\sqrt{\\frac{\\sum_{i=1}^{N} (x_i - \\mu)^2}{N}}\n$$ {#eq-stddev} \n\nYou can also create equations inline by using the `$` symbol. For example, `$\\alpha = \\beta + \\gamma$` will render as $\\alpha = \\beta + \\gamma$. To learn more about how to write equations in \\LaTeX \\hspace{.001cm} using Markdown, you can refer to the [Overleaf documentation](https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols).\n\n## Figures\n\nYou can include figures in your document using the `![Caption](path/to/image.png){#fig-label}` syntax. For example:\n\n```{markdown}\n![This is a figure caption.](path/to/image.png){#fig-label}\n```\n\nThis will include the image `path/to/image.png` in your document with the caption \"This is a figure caption.\" You can refer to the figure using the label `fig-label`, but this is optional.\n\nIf you are creating plots on Jupyter Notebook, the graphs will appear after the code cell that generates them.\n\n## Citations\n\nAlthough Markdown has excellent reference support with [BibTeX files](https://en.wikipedia.org/wiki/BibTeX), there is no reliable way to include citations automatically in Jupyter Notebooks. The two packages I know that manage citations, [cite2c](https://github.com/takluyver/cite2c) and [Jupyterlab Citation Manager](https://github.com/krassowski/jupyterlab-citation-manager), are not ideal. The first has not been maintained for years, while the second is not ready for most uses. Therefore, I suggest simply copying the citation from Google Scholar and pasting it into a Markdown cell titled \"References\" at the end of your document. The same approach applies for inline citations.\n\n## Footnotes\n\nJupyter and Markdown support inline footnotes[^inline]. To create a footnote, simply add a caret and brackets with a label inside, like this: `[^label]`. Then, you can define the footnote content anywhere in the document using the same label followed by a colon[^content]. I usually include them at the end of a paragraph. Jupyter will automatically number and format your footnotes for you.\n\n[^inline]: This is an inline footnote.\n[^content]: You can also include multiple paragraphs in a footnote by indenting the subsequent paragraphs.\n\n# Conclusion\n\nI hope you find this tutorial helpful and that you can use Jupyter Notebook and Markdown to create beautiful documents. If you have any questions or feedback, please feel free to reach out to me. Happy coding! :)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"highlight-style":"arrow","toc-depth":2,"number-sections":false,"output-file":"02-jupyter-markdown-tutorial.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en-GB","fig-responsive":true,"quarto-version":"1.8.24","theme":{"light":"lumen","dark":"solar"},"title":"Jupyter Notebook and Markdown Tutorial","jupyter":"python3","editor":{"render-on-save":true}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}