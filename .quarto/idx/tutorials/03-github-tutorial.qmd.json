{"title":"GitHub Tutorial","markdown":{"yaml":{"title":"GitHub Tutorial","lang":"en-GB","jupyter":"python3","highlight-style":"arrow","format":{"html":{"toc":true,"toc-depth":2,"number-sections":false}},"editor":{"render-on-save":true}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\nThis tutorial will guide you through the process of creating a [GitHub educational account](https://github.com/education), [downloading and installing GitHub Desktop](https://github.com/apps/desktop), and downloading the course materials from GitHub to your computer. The tutorial also covers the basics of Git and GitHub, such as creating a repository, committing changes, and pushing changes to GitHub. It will also show you how to use [VS Code](https://code.visualstudio.com/) to edit and manage your code on GitHub. You can use any tool you prefer to version control your code.\n\n# What are Git and GitHub?\n\n[Git](https://git-scm.com/) is a distributed version control system that allows you to track changes in your codebase, collaborate with others, and manage your projects. It was developed by [Linus Torvalds](https://en.wikipedia.org/wiki/Linus_Torvalds) (of [Linux](https://en.wikipedia.org/wiki/Linux) fame) in 2005 and has become the [*de facto* standard for version control](https://stackoverflow.blog/2023/01/09/beyond-git-the-other-version-control-systems-developers-use/) in the software development industry. While Git is a powerful tool, it can be a bit challenging to use, especially for beginners. That is where GitHub comes in.\n\n[GitHub](https://github.com) is a web-based platform that provides hosting for Git repositories, allowing you to store different versions your code in the cloud and collaborate with others. GitHub also offers several useful features, such as issue tracking, project management, and continuous integration. It can even [host your website for free](https://pages.github.com/). GitHub has become the go-to platform for open-source projects, and many companies use it to manage their codebase, such as [Microsoft](https://github.com/microsoft), [Google](https://github.com/google), and [Meta](https://github.com/facebook)[^apollo]. Think about GitHub as a social network for developers, where you can follow other developers, star their projects, and contribute to open-source projects.\n\n[^apollo]: As a curiosity, the code for the [Apollo 11 mission](https://github.com/chrislgarry/Apollo-11) is also available on GitHub.\n\nWe will use GitHub extensively in our course. So it is important that you become familiar with it. The good news is that GitHub is free for public and private repositories for educational purposes. Here are the steps to get started with GitHub:\n\n1. **Create a GitHub account**. Go to <https://github.com/> and sign up (top right). You can use your Emory email address to get a free educational account (more on this later). Be careful selecting your username, this will be visible to the public. \n\n![GitHub Signup](images/github-signup.png)\n\n2. **Apply to GitHub Education**. Go to <https://github.com/education> and apply for the GitHub Student Developer Pack. This will give you access to several tools and services for free, such as a free domain name, cloud hosting, and more. You will need to provide proof of your student status, such as an ID card or transcript. Please click on \"Join GitHub Education\" and follow the instructions on the website.\n\n![GitHub Education](images/github-education.png)\n\n3. **Download and install GitHub Desktop**. You can download GitHub Desktop from <https://desktop.github.com/>. GitHub Desktop is a graphical user interface (GUI) for Git that makes it easier to work with repositories. It is available for Windows and macOS. You can also use the command line if you prefer, but GitHub Desktop is more user-friendly and will be used in this tutorial.\n\n![GitHub Desktop](images/github-desktop.png)\n\nAfter you install GitHub Desktop, you will need to sign in with your GitHub account. This will allow you to work with your repositories. Then you should see the following screen:\n\n![GitHub Desktop Sign In](images/github-desktop-signin.png)\n\nNow you are ready to start using Git and GitHub. Let us move on to the next step.\n\n# Downloading the Course Materials\n\nThe course materials are available on GitHub at\n<https://github.com/danilofreire/qtm350>. You should \"fork\" the repository to your account. This will create a copy of the repository in your account that you can modify and push changes to. Please click on the top-right corner of the repository page and select \"Fork\".\n\n![Fork the Repository](images/github-fork.png)\n\n![Create a Copy of the Repository](images/github-fork02.png)\n\nYou will be asked to make your own copy of the lecture notes. You can add any name you like. I\nrecommend you use the name same name I used for the repository (`qtm350`). This will make it easier to follow the instructions in the tutorials. Click on \"Create fork\".\n\n*You will only do this once*. After you fork the repository, you will be able to pull changes from the original repository and push changes to your forked repository. This will allow you to keep your copy of the course materials up to date with the latest changes.\n\nNow you need to clone your repository to your computer. This will create a local copy of the repository on your computer that you can work with. To do this, click on the green \"Code\" button and copy the URL of your forked repository. Again, please remember that you should clone _your forked repository_, not the original repository. The name in the URL should be your username.\n\nPlease open GitHub Desktop and click on the \"Clone a Repository from the Internet\" button. This will open a dialog where you can paste the URL of your repository and select a location on your computer to save the repository. Then click on \"Clone\".\n\n![Click on Clone a Repository from the Internet.](images/github-clone01.png)\n\n![Click on URL and Paste the Repository URL. Then click on Clone.](images/github-clone02.png)\n\n![Cloning](images/github-clone03.png)\n\nThen select \"To contribute to the parent project\" and click on \"Continue\". This option allows you to keep updating your lecture notes from the instructor's repository. The other option creates a local copy that has no links to the original repository. If you accidentally choose this option, you will not be able to see any changes. To reverse: (a) remove the repository on your computer (by right-clicking on the repository on Github dekstop), (b) manually delete the directory, (c) go back to Step 2.\n\n![Cloning](images/github-clone04.png)\n\n*And you are done!* You now have a local copy of the course materials on your computer that you can work with. You can open the repository in VS Code by clicking on \"Repository\" > \"Open in Visual Studio Code\". This will open the repository in VS Code, where you can edit and manage your code.\n\n![Open in Visual Studio Code](images/github-open-vscode.png)\n\n# How to Add Changes to Your Repository\n\nNow that you have the course materials on your computer, let us go over some of the essential Git and GitHub commands that you will need to use.\n\n1. *A programmer makes some changes to their files*: In the photo you can see that I have made many changes to a few files. GitHub Desktop will show you the changes you made to your files. You can see the changes in the \"Changes\" tab.\n\n![Changes](images/github-desktop-changes.png)\n\nYou can also see the history of your changes in the \"History\" tab. This will show you all the commits you have made to your repository. The green lines indicate the changes you made, and the red lines indicate the changes you removed.\n\n![History](images/github-desktop-history.png)\n\n2. *The programmer commits the changes*: After making changes to your files, you need to commit them to your local repository. This creates a snapshot of your changes that you can revert to later if needed. To commit changes, open GitHub Desktop and you will see the changes you made. Write a summary of the changes in the \"Summary\" box and click on \"Commit to main\"[^main]. It is always a good idea to write a descriptive summary of your changes so that you can easily track them later.\n\n[^main]: The default branch in GitHub is called `main`. This is the branch where you will make most of your changes. You can create other branches if you want to work on different features or bug fixes.\n\n![Commit Changes](images/github-desktop-commit.png)\n\nAs you can see, I have committed the changes I made to the files. You can see the commit message in the \"History\" tab. This will allow you to track the changes you made to your files.\n\n![Commit Message](images/github-desktop-commit02.png)\n\n3. *The programmer pushes the changes to GitHub*: After committing your changes to your local repository, you need to push them to GitHub. This will update the remote repository with the changes you made. To push changes, click on \"Repository\" > \"Push\" in GitHub Desktop. This will push your changes to GitHub. \n\n![Push or Fetch Changes](images/github-desktop-push.png)\n\nAs you can also see, there are two options: \"Push\" and \"Fetch\". \"Push\" will push your changes to GitHub, while \"Fetch\" will fetch (\"download\") changes from GitHub. You can use \"Fetch\" to update your local repository with the changes from GitHub. We will cover this in more detail in the next section.\n\n# Updating the Course Materials\n\nThe course materials will be updated regularly with new content, bug fixes, and improvements. To keep your copy of the course materials up to date, you need to pull changes from the original repository. However, before proceeding, make sure that you have read the previous section and that you have committed all outstanding changes.\n\n1. In the top panel go to the \"Branch\" tab. Click on the option \"update from upstream/main\".\n   - \"upstream\" refers to the original repository (the instructor's).\n   - \"main\" is usually the name given to the primary version of your repository.\n   - *Note*: You can create different branches to work on different features or bug fixes. This allows you to work on different parts of your codebase without affecting the main branch. You can then merge the changes from the different branches into the main branch when you are ready.\n\n![Update from Upstream](images/github-desktop-update.png)\n\n**Some practical advice**:\n\n- Try to do the updating process *at the start of every class*, to make sure you have the latest version.\n\n- Store any modifications to the files *with a separate file name*. This avoids your files *being overwritten by the instructor's version* when you do this process\n\n- Privacy: Right now, your forked repository is publicly visible on your account. If you want to change this, you can make your repository private. How to do this:\n   - Go to your repository on GitHub\n   - Click on the \"Settings\" tab\n   - Scroll down to the \"Danger Zone\" section\n   - Click on \"Make private\"\n   - Confirm the change\n\nAnd that is it! You now know how to use Git and GitHub to manage your code and collaborate with others. If you have any questions or need help, feel free to ask. I am here to help you. Good luck with your coding!\n\n# Recommended Readings and Resources\n\n- [GitHub Guides](https://guides.github.com/): A collection of guides to help you get started with Git and GitHub.\n- [GitHub Skills](https://skills.github.com/): A very useful website to help you improve your Git and GitHub skills.\n- [GitHub Desktop Documentation](https://docs.github.com/en/desktop): The official documentation for GitHub Desktop.\n- [Pro Git](https://git-scm.com/book/en/v2): A free book that covers everything you need to know about Git.\n- [How to Use Git & GitHub Desktop Tutorial for Beginners - YouTube](https://www.youtube.com/watch?v=MaqVvXv6zrU): A video tutorial that covers the basics of GitHub Desktop. There are many other tutorials on YouTube that can help you get started, so feel free to explore!\n\n\n","srcMarkdownNoYaml":"\n\n# Introduction\n\nThis tutorial will guide you through the process of creating a [GitHub educational account](https://github.com/education), [downloading and installing GitHub Desktop](https://github.com/apps/desktop), and downloading the course materials from GitHub to your computer. The tutorial also covers the basics of Git and GitHub, such as creating a repository, committing changes, and pushing changes to GitHub. It will also show you how to use [VS Code](https://code.visualstudio.com/) to edit and manage your code on GitHub. You can use any tool you prefer to version control your code.\n\n# What are Git and GitHub?\n\n[Git](https://git-scm.com/) is a distributed version control system that allows you to track changes in your codebase, collaborate with others, and manage your projects. It was developed by [Linus Torvalds](https://en.wikipedia.org/wiki/Linus_Torvalds) (of [Linux](https://en.wikipedia.org/wiki/Linux) fame) in 2005 and has become the [*de facto* standard for version control](https://stackoverflow.blog/2023/01/09/beyond-git-the-other-version-control-systems-developers-use/) in the software development industry. While Git is a powerful tool, it can be a bit challenging to use, especially for beginners. That is where GitHub comes in.\n\n[GitHub](https://github.com) is a web-based platform that provides hosting for Git repositories, allowing you to store different versions your code in the cloud and collaborate with others. GitHub also offers several useful features, such as issue tracking, project management, and continuous integration. It can even [host your website for free](https://pages.github.com/). GitHub has become the go-to platform for open-source projects, and many companies use it to manage their codebase, such as [Microsoft](https://github.com/microsoft), [Google](https://github.com/google), and [Meta](https://github.com/facebook)[^apollo]. Think about GitHub as a social network for developers, where you can follow other developers, star their projects, and contribute to open-source projects.\n\n[^apollo]: As a curiosity, the code for the [Apollo 11 mission](https://github.com/chrislgarry/Apollo-11) is also available on GitHub.\n\nWe will use GitHub extensively in our course. So it is important that you become familiar with it. The good news is that GitHub is free for public and private repositories for educational purposes. Here are the steps to get started with GitHub:\n\n1. **Create a GitHub account**. Go to <https://github.com/> and sign up (top right). You can use your Emory email address to get a free educational account (more on this later). Be careful selecting your username, this will be visible to the public. \n\n![GitHub Signup](images/github-signup.png)\n\n2. **Apply to GitHub Education**. Go to <https://github.com/education> and apply for the GitHub Student Developer Pack. This will give you access to several tools and services for free, such as a free domain name, cloud hosting, and more. You will need to provide proof of your student status, such as an ID card or transcript. Please click on \"Join GitHub Education\" and follow the instructions on the website.\n\n![GitHub Education](images/github-education.png)\n\n3. **Download and install GitHub Desktop**. You can download GitHub Desktop from <https://desktop.github.com/>. GitHub Desktop is a graphical user interface (GUI) for Git that makes it easier to work with repositories. It is available for Windows and macOS. You can also use the command line if you prefer, but GitHub Desktop is more user-friendly and will be used in this tutorial.\n\n![GitHub Desktop](images/github-desktop.png)\n\nAfter you install GitHub Desktop, you will need to sign in with your GitHub account. This will allow you to work with your repositories. Then you should see the following screen:\n\n![GitHub Desktop Sign In](images/github-desktop-signin.png)\n\nNow you are ready to start using Git and GitHub. Let us move on to the next step.\n\n# Downloading the Course Materials\n\nThe course materials are available on GitHub at\n<https://github.com/danilofreire/qtm350>. You should \"fork\" the repository to your account. This will create a copy of the repository in your account that you can modify and push changes to. Please click on the top-right corner of the repository page and select \"Fork\".\n\n![Fork the Repository](images/github-fork.png)\n\n![Create a Copy of the Repository](images/github-fork02.png)\n\nYou will be asked to make your own copy of the lecture notes. You can add any name you like. I\nrecommend you use the name same name I used for the repository (`qtm350`). This will make it easier to follow the instructions in the tutorials. Click on \"Create fork\".\n\n*You will only do this once*. After you fork the repository, you will be able to pull changes from the original repository and push changes to your forked repository. This will allow you to keep your copy of the course materials up to date with the latest changes.\n\nNow you need to clone your repository to your computer. This will create a local copy of the repository on your computer that you can work with. To do this, click on the green \"Code\" button and copy the URL of your forked repository. Again, please remember that you should clone _your forked repository_, not the original repository. The name in the URL should be your username.\n\nPlease open GitHub Desktop and click on the \"Clone a Repository from the Internet\" button. This will open a dialog where you can paste the URL of your repository and select a location on your computer to save the repository. Then click on \"Clone\".\n\n![Click on Clone a Repository from the Internet.](images/github-clone01.png)\n\n![Click on URL and Paste the Repository URL. Then click on Clone.](images/github-clone02.png)\n\n![Cloning](images/github-clone03.png)\n\nThen select \"To contribute to the parent project\" and click on \"Continue\". This option allows you to keep updating your lecture notes from the instructor's repository. The other option creates a local copy that has no links to the original repository. If you accidentally choose this option, you will not be able to see any changes. To reverse: (a) remove the repository on your computer (by right-clicking on the repository on Github dekstop), (b) manually delete the directory, (c) go back to Step 2.\n\n![Cloning](images/github-clone04.png)\n\n*And you are done!* You now have a local copy of the course materials on your computer that you can work with. You can open the repository in VS Code by clicking on \"Repository\" > \"Open in Visual Studio Code\". This will open the repository in VS Code, where you can edit and manage your code.\n\n![Open in Visual Studio Code](images/github-open-vscode.png)\n\n# How to Add Changes to Your Repository\n\nNow that you have the course materials on your computer, let us go over some of the essential Git and GitHub commands that you will need to use.\n\n1. *A programmer makes some changes to their files*: In the photo you can see that I have made many changes to a few files. GitHub Desktop will show you the changes you made to your files. You can see the changes in the \"Changes\" tab.\n\n![Changes](images/github-desktop-changes.png)\n\nYou can also see the history of your changes in the \"History\" tab. This will show you all the commits you have made to your repository. The green lines indicate the changes you made, and the red lines indicate the changes you removed.\n\n![History](images/github-desktop-history.png)\n\n2. *The programmer commits the changes*: After making changes to your files, you need to commit them to your local repository. This creates a snapshot of your changes that you can revert to later if needed. To commit changes, open GitHub Desktop and you will see the changes you made. Write a summary of the changes in the \"Summary\" box and click on \"Commit to main\"[^main]. It is always a good idea to write a descriptive summary of your changes so that you can easily track them later.\n\n[^main]: The default branch in GitHub is called `main`. This is the branch where you will make most of your changes. You can create other branches if you want to work on different features or bug fixes.\n\n![Commit Changes](images/github-desktop-commit.png)\n\nAs you can see, I have committed the changes I made to the files. You can see the commit message in the \"History\" tab. This will allow you to track the changes you made to your files.\n\n![Commit Message](images/github-desktop-commit02.png)\n\n3. *The programmer pushes the changes to GitHub*: After committing your changes to your local repository, you need to push them to GitHub. This will update the remote repository with the changes you made. To push changes, click on \"Repository\" > \"Push\" in GitHub Desktop. This will push your changes to GitHub. \n\n![Push or Fetch Changes](images/github-desktop-push.png)\n\nAs you can also see, there are two options: \"Push\" and \"Fetch\". \"Push\" will push your changes to GitHub, while \"Fetch\" will fetch (\"download\") changes from GitHub. You can use \"Fetch\" to update your local repository with the changes from GitHub. We will cover this in more detail in the next section.\n\n# Updating the Course Materials\n\nThe course materials will be updated regularly with new content, bug fixes, and improvements. To keep your copy of the course materials up to date, you need to pull changes from the original repository. However, before proceeding, make sure that you have read the previous section and that you have committed all outstanding changes.\n\n1. In the top panel go to the \"Branch\" tab. Click on the option \"update from upstream/main\".\n   - \"upstream\" refers to the original repository (the instructor's).\n   - \"main\" is usually the name given to the primary version of your repository.\n   - *Note*: You can create different branches to work on different features or bug fixes. This allows you to work on different parts of your codebase without affecting the main branch. You can then merge the changes from the different branches into the main branch when you are ready.\n\n![Update from Upstream](images/github-desktop-update.png)\n\n**Some practical advice**:\n\n- Try to do the updating process *at the start of every class*, to make sure you have the latest version.\n\n- Store any modifications to the files *with a separate file name*. This avoids your files *being overwritten by the instructor's version* when you do this process\n\n- Privacy: Right now, your forked repository is publicly visible on your account. If you want to change this, you can make your repository private. How to do this:\n   - Go to your repository on GitHub\n   - Click on the \"Settings\" tab\n   - Scroll down to the \"Danger Zone\" section\n   - Click on \"Make private\"\n   - Confirm the change\n\nAnd that is it! You now know how to use Git and GitHub to manage your code and collaborate with others. If you have any questions or need help, feel free to ask. I am here to help you. Good luck with your coding!\n\n# Recommended Readings and Resources\n\n- [GitHub Guides](https://guides.github.com/): A collection of guides to help you get started with Git and GitHub.\n- [GitHub Skills](https://skills.github.com/): A very useful website to help you improve your Git and GitHub skills.\n- [GitHub Desktop Documentation](https://docs.github.com/en/desktop): The official documentation for GitHub Desktop.\n- [Pro Git](https://git-scm.com/book/en/v2): A free book that covers everything you need to know about Git.\n- [How to Use Git & GitHub Desktop Tutorial for Beginners - YouTube](https://www.youtube.com/watch?v=MaqVvXv6zrU): A video tutorial that covers the basics of GitHub Desktop. There are many other tutorials on YouTube that can help you get started, so feel free to explore!\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"highlight-style":"arrow","toc-depth":2,"number-sections":false,"output-file":"03-github-tutorial.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en-GB","fig-responsive":true,"quarto-version":"1.7.33","theme":{"light":"lumen","dark":"solar"},"title":"GitHub Tutorial","jupyter":"python3","editor":{"render-on-save":true}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}